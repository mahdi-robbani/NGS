---
title: "qQTL exercise"
author: "Mahdi"
date: "September 25, 2020"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Understanding the data

## Task 1
1. In the `sub_geno.tab` file, 0, 1 and 2 most likely represent the two homozygous and hgeteroguzous genotypes. -1 probably means missing data.
2. In the `sub_expr.tab` file, the rows are genes/transcripts and the columns are different samples and their gene expression values.
3. The `design.tab` file contains information about each column of the `sub_expr.tab` file. It says which population they belong to and other characteristics.

## Task 2
1. Calculate the number of missing genotypes for each SNP across all individuals.
```{r}
snps <- read.table("sub_geno.tab")
missing_count <- apply((snps == -1), 1, sum)
head(missing_count)
```

2. Calculate the minor allele frequency (MAF) for all SNPs across all individuals.
```{r}
get_geno_frequency <- function(geno, snp_mat){
  boolean_matrix <- snp_mat == geno
  count <- apply(boolean_matrix, 1, sum)
  freq <- count/dim(snps)[2]
  return (freq)
}

get_maf <- function(snp_mat){
  genotypes <- c(0,1,2)
  #get matrix of genotype frequencies
  geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
  colnames(geno_freq) <- genotypes
  allele_freq <- geno_freq + geno_freq[,2]/2
  allele_freq <- allele_freq[,-2]
  maf <- apply(allele_freq, 1, min)
  return (maf)
}

maf <- get_maf(snps)
head(maf)
```

3. Filter our SNPs that have missing genotypes or a MAF<0.05 and use the filtered snps for the rest of the exercise.
```{r}
keep <- maf >= 0.05 & missing_count == 0
snps_filtered <- snps[keep,]
dim(snps_filtered)
```

4. Calculate the MAF for africans and non-africans separately. Is there a difference?
```{r}
design <- read.table("design.tab", header = T, sep = "\t")

filter_snp_population <- function(pop, snp_mat, design_mat, inv=F){
  if(inv){
    cols <- design_mat$Source.Name[design_mat$Characteristics.population. != pop]
  } else{
    cols <- design_mat$Source.Name[design_mat$Characteristics.population. == pop]
  }
  snp_mat <- (snp_mat[, cols])
  return(snp_mat)
}

african_snps <- filter_snp_population("YRI", snps_filtered, design)
non_african_snps <- filter_snp_population("YRI", snps_filtered, design, inv = T)

african_maf <- get_maf(african_snps)
non_african_maf <- get_maf(non_african_snps)
print("African")
print(head(african_maf))
print("Non-African")
print(head(non_african_maf))
```

Yes, there is a difference between the two groups.

## Task 3
1. Plot the distribution of expression levels across all samples for the ENSG00000172404.4 gene.
```{r}
gene_expr <- read.table("sub_expr.tab")
gene1 <- c("ENSG00000172404.4")
hist(as.matrix(gene_expr[gene1,]), main=gene1, xlab="Gene Expression Level")

```

2. Plot the expression levels of ENSG00000172404.4 against the genotypes of snp_22_41256802 and snp_22_45782142
```{r}
library(tidyverse)
snps1 <- c("snp_22_41256802", "snp_22_45782142")
gene1_col <- t(gene_expr[gene1,])
snps1_col <- t(snps_filtered[snps1,])
df <- cbind(snps1_col, gene1_col)
colnames(df) <- c(snps1, "expression")
df <- df %>% 
  as_tibble %>%
  gather(-expression, key="SNP", value ="genotype")
df$genotype <- as.factor(df$genotype)
df %>%
  ggplot(aes(x=genotype, y=expression)) + geom_boxplot() +
  facet_wrap(~SNP)

```

## Task 4
1. Do a linear regression of all sample genotypes on sample gene expression for snp_22_41256802 on ENSG00000172404.4
```{r}
lm_snp_a <- lm(gene1_col ~ snps1_col[,1])
summary(lm_snp_a)
```

2. Do a linear regression of all sample genotypes on sample gene expression for snp_22_45782142 on ENSG00000172404.4
```{r}
lm_snp_b <- lm(gene1_col ~ snps1_col[,2])
summary(lm_snp_b)
```

3. Make sense of the results (Understand what the values represent)
Gene expression levels can be somehwat explained by the first SNP but not the second. This is because the first SNP has an $R^2$ value of 0.5394 and very small p value for its coefficient meaning the model explains around half the variation in the data. In contrast the second SNP has an $R^2$ value of  0.002019 meaning the model explains almost no variation in the data.
