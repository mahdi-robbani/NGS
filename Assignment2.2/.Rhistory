allele_freq <- get_af(snp_ceu_20)
hist(allele_freq[,1])
#hist(allele_freq[,2])
min(allele_freq)
min(allele_freq[,1])
min(allele_freq)
min(allele_freq[,1])
min(allele_freq[,2])
min(allele_freq[,1])
min(allele_freq[,2])
min(allele_freq[,2] +allele_freq[,1] )
min(allele_freq[,1])
head(allele_freq)
dim(allele_freq)
allele_freq[,1] == mins(allele_freq[,1])
allele_freq[,1] == min(allele_freq[,1])
sum(allele_freq[,1] == min(allele_freq[,1]))
expr_ceu_20[1:5,1:5]
dim(expr_ceu_20)[1]
expr_ceu_20[1,]
dim(expr_ceu_20)[1]
expr_ceu_20[1:5,1:5]
expr_ceu_20[1:5,1:5]
apply(expr_ceu_20, 1 , max)
apply(expr_ceu_20, 1 , mean)
apply(expr_ceu_20[,-1], 1 , mean)
dim(expr_ceu_20)
dim(apply(expr_ceu_20[,-1], 1 , mean))
length(apply(expr_ceu_20[,-1], 1 , mean))
expr_ceu_20[1:5,1:5]
mean_expr <-apply(expr_ceu_20[,-1], 1 , mean)
max(mean_expr)
mean_expr == max(mean_expr)
expr_ceu_20[mean_expr == max(mean_expr),]
expr_ceu_20[mean_expr == max(mean_expr),1]
mean_expr <- apply(expr_ceu_20[,-1], 1 , mean)
expr_ceu_20[mean_expr == max(mean_expr),1]
#Matrix eQTL
library(MatrixEQTL)
# Genotype file names
SNP_file_name = "geno_ceu_chr20_strict.tab" ; #Genotype file path
snps_location_file_name = "geno_ceu_chr20_strict.pos" ; #snp position file path
# Gene expression file names
expression_file_name = "expr_ceu_chr20.tab" ;#Expression file path
gene_location_file_name = "expr_chr20.pos" ;#gene position file path
# Only associations significant at this level will be saved
pvOutputThreshold_cis = 1; #p.value threshold for cis eqtls
pvOutputThreshold_tra = 0; #p.value threshold for trans eqtls
#Covariates file names
covariates_file_name = character();# Set to character() for no covariates
# Distance for local gene-SNP pairs
cisDist = 1e6; #Define cis distance
## Load genotype data
snps = SlicedData$new();
snps$fileDelimiter = "\t"; # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1; # one row of column labels
snps$fileSkipColumns = 1; # one column of row labels
snps$fileSliceSize = 2000; # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
#Matrix eQTL
library(MatrixEQTL)
# Genotype file names
SNP_file_name = "data/geno_ceu_chr20_strict.tab" ; #Genotype file path
snps_location_file_name = "data/geno_ceu_chr20_strict.pos" ; #snp position file path
# Gene expression file names
expression_file_name = "data/expr_ceu_chr20.tab" ;#Expression file path
gene_location_file_name = "data/expr_chr20.pos" ;#gene position file path
# Only associations significant at this level will be saved
pvOutputThreshold_cis = 1; #p.value threshold for cis eqtls
pvOutputThreshold_tra = 0; #p.value threshold for trans eqtls
#Covariates file names
covariates_file_name = character();# Set to character() for no covariates
# Distance for local gene-SNP pairs
cisDist = 1e6; #Define cis distance
## Load genotype data
snps = SlicedData$new();
snps$fileDelimiter = "\t"; # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1; # one row of column labels
snps$fileSkipColumns = 1; # one column of row labels
snps$fileSliceSize = 2000; # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
## Load gene expression data
gene = SlicedData$new();
gene$fileDelimiter = "\t"; # the TAB character
gene$fileOmitCharacters = "NA"; # denote missing values;
gene$fileSkipRows = 1; # one row of column labels
gene$fileSkipColumns = 1; # one column of row labels
gene$fileSliceSize = 2000; # read file in slices of 2,000 rows
gene$LoadFile(expression_file_name);
#Load position files
snpspos = read.table(snps_location_file_name, header = TRUE, stringsAsFactors = FALSE);
genepos = read.table(gene_location_file_name, header = TRUE, stringsAsFactors = FALSE);
## Run the analysis
me = Matrix_eQTL_main(
snps = snps,
gene = gene,
output_file_name=NULL,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = modelLINEAR,
errorCovariance =numeric(),
verbose = TRUE,
output_file_name.cis = NULL, #Do not write out cis results
pvOutputThreshold.cis = pvOutputThreshold_cis,
snpspos = snpspos,
genepos = genepos,
cisDist = cisDist,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE,
pvalue.hist = FALSE)
cis_eqtls = me$cis$eqtls[,-c(5)]
cis_eqtls["beta_se"] = cis_eqtls["beta"]/cis_eqtls["statistic"]
rm(me)
head(cis_eqtls)
p.adj(cis_eqtls$pvalue)
?p.adjust
p.adjust(cis_eqtls$pvalue, method = "bonferroni")
p.adj <- p.adjust(cis_eqtls$pvalue, method = "bonferroni")
sum(p.adj <= 0.05)
View(cis_eqtls)
rm(p.adj)
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
cis_eqtls$p.adj <- p.adjust(cis_eqtls$pvalue, method = "bonferroni")
sum(cis_eqtls$p.adj <= 0.05)
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
print(cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),])
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),1:2]
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),1:2]
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
me = Matrix_eQTL_main(
snps = snps,
gene = gene,
output_file_name=NULL,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = modelLINEAR,
errorCovariance =numeric(),
verbose = TRUE,
output_file_name.cis = NULL, #Do not write out cis results
pvOutputThreshold.cis = pvOutputThreshold_cis,
snpspos = snpspos,
genepos = genepos,
cisDist = cisDist,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE,
pvalue.hist = FALSE)
head(me$cis$eqtls)
head(cis_eqtls)
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
head(me$cis$neqtls)
head(me$cis$ntests)
head(me$cis$eqtls)
## Run the analysis
me = Matrix_eQTL_main(
snps = snps,
gene = gene,
output_file_name=NULL,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = modelLINEAR,
errorCovariance =numeric(),
verbose = TRUE,
output_file_name.cis = NULL, #Do not write out cis results
pvOutputThreshold.cis = pvOutputThreshold_cis,
snpspos = snpspos,
genepos = genepos,
cisDist = cisDist,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE,
pvalue.hist = FALSE)
trans_eqtls = me$all$eqtls[,-c(5)]
trans_eqtls["beta_se"] = trans_eqtls["beta"]/trans_eqtls["statistic"]
trans_eqtls$p.adj <- p.adjust(trans_eqtls$pvalue, method = "bonferroni")
sum(trans_eqtls$p.adj <= 0.05)
p.adjust(trans_eqtls$pvalue, method = "bonferroni")
head(trans_eqtls)
head(trans_eqtls)
## Run the analysis
me = Matrix_eQTL_main(
snps = snps,
gene = gene,
output_file_name=NULL,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = modelLINEAR,
errorCovariance =numeric(),
verbose = TRUE,
output_file_name.cis = NULL, #Do not write out cis results
pvOutputThreshold.cis = pvOutputThreshold_cis,
snpspos = snpspos,
genepos = genepos,
cisDist = cisDist,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE,
pvalue.hist = FALSE)
trans_eqtls = me$all$eqtls[,-c(5)]
trans_eqtls["beta_se"] = trans_eqtls["beta"]/trans_eqtls["statistic"]
rm(me)
head(trans_eqtls)
# Genotype file names
SNP_file_name = "geno_ceu_chr22_strict.tab" ; #Genotype file path
snps_location_file_name = "geno_ceu_chr22_strict.pos" ; #snp position file path
# Gene expression file names
expression_file_name = "expr_ceu_chr20.tab" ;#Expression file path
gene_location_file_name = "expr_chr20.pos" ;#gene position file path
# Only associations significant at this level will be saved
pvOutputThreshold_cis = 0; #p.value threshold for cis eqtls
pvOutputThreshold_tra = 1; #p.value threshold for trans eqtls
#Covariates file names
covariates_file_name = character();# Set to character() for no covariates
# Distance for local gene-SNP pairs
cisDist = 1e6; #Define cis distance
## Load genotype data
snps = SlicedData$new();
snps$fileDelimiter = "\t"; # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1; # one row of column labels
snps$fileSkipColumns = 1; # one column of row labels
snps$fileSliceSize = 2000; # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
# Genotype file names
SNP_file_name = "data/geno_ceu_chr22_strict.tab" ; #Genotype file path
snps_location_file_name = "data/geno_ceu_chr22_strict.pos" ; #snp position file path
# Gene expression file names
expression_file_name = "data/expr_ceu_chr20.tab" ;#Expression file path
gene_location_file_name = "data/expr_chr20.pos" ;#gene position file path
# Only associations significant at this level will be saved
pvOutputThreshold_cis = 0; #p.value threshold for cis eqtls
pvOutputThreshold_tra = 1; #p.value threshold for trans eqtls
#Covariates file names
covariates_file_name = character();# Set to character() for no covariates
# Distance for local gene-SNP pairs
cisDist = 1e6; #Define cis distance
## Load genotype data
snps = SlicedData$new();
snps$fileDelimiter = "\t"; # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1; # one row of column labels
snps$fileSkipColumns = 1; # one column of row labels
snps$fileSliceSize = 2000; # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
## Load gene expression data
gene = SlicedData$new();
gene$fileDelimiter = "\t"; # the TAB character
gene$fileOmitCharacters = "NA"; # denote missing values;
gene$fileSkipRows = 1; # one row of column labels
gene$fileSkipColumns = 1; # one column of row labels
gene$fileSliceSize = 2000; # read file in slices of 2,000 rows
gene$LoadFile(expression_file_name);
#Load position files
snpspos = read.table(snps_location_file_name, header = TRUE, stringsAsFactors = FALSE);
genepos = read.table(gene_location_file_name, header = TRUE, stringsAsFactors = FALSE);
## Run the analysis
me = Matrix_eQTL_main(
snps = snps,
gene = gene,
output_file_name=NULL,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = modelLINEAR,
errorCovariance =numeric(),
verbose = TRUE,
output_file_name.cis = NULL, #Do not write out cis results
pvOutputThreshold.cis = pvOutputThreshold_cis,
snpspos = snpspos,
genepos = genepos,
cisDist = cisDist,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE,
pvalue.hist = FALSE)
trans_eqtls = me$all$eqtls[,-c(5)]
trans_eqtls["beta_se"] = trans_eqtls["beta"]/trans_eqtls["statistic"]
rm(me)
head(trans_eqtls)
trans_eqtls$p.adj <- p.adjust(trans_eqtls$pvalue, method = "bonferroni")
sum(trans_eqtls$p.adj <= 0.05)
p.adjust(trans_eqtls$pvalue, method = "bonferroni")
head(trans_eqtls)
qqp<-function(x, maxLogP=30,...){
x<-x[!is.na(x)]
if(!missing(maxLogP)){
x[x<10^-maxLogP]<-10^-maxLogP
}
N<-length(x)
chi1<-qchisq(1-x,1)
x<-sort(x)
e<- -log((1:N-0.5)/N,10)
plot(e,-log(x,10),ylab="Observed log10(p-value)",xlab="Expected log10(p-value)",...)
abline(0,1,col=2,lwd=2)
c95<-qbeta(0.95,1:N,N-(1:N)+1)
c05<-qbeta(0.05,1:N,N-(1:N)+1)
lines(e,-log(c95,10))
lines(e,-log(c05,10))
}
qqp(cis_eqtls$pvalue)
qqp(cis_eqtls$pvalue)
qqp(trans_eqtls$pvalue)
maf_df <- data.frame("id" = snp_ceu_20$id, "maf" = get_maf(snp_ceu_20))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snps)[2]
return (freq)
}
get_maf <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
maf <- apply(allele_freq, 1, min)
return (maf)
}
maf_df <- data.frame("id" = snp_ceu_20$id, "maf" = get_maf(snp_ceu_20))
cis_eqtls %>%
arrange(gene, snps) %>%
select(snps) %>%
unique -> c
head(c)
dim(c)
cis_eqtls %>%
arrange(gene, snps) %>%
select(snps) %>%
rename(snp = "id")
cis_eqtls %>%
arrange(gene, snps) %>%
select(snps) %>%
rename(snps = id) %<%
unique -> c
head(c)
cis_eqtls %>%
arrange(gene, snps) %>%
select(snps) %>%
rename(snps = id) %>%
unique -> c
cis_eqtls %>%
arrange(gene, snps) %>%
select(snps) %>%
rename(snps = id) %>%
head
cis_eqtls %>%
arrange(gene, snps) %>%
select(snps) %>%
rename(id = snps) %>%
head
cis_eqtls %>%
arrange(gene, snps) %>%
select(snps) %>%
rename(id = snps) %>%
unique -> c
head(c)
x <- merge(c, maf_df, by="id", all.x = T)
x
sum(cis_eqtls$snps == x$id)
dim(x)
cis_eqtls %>%
arrange(gene, snps) %>%
select(snps) %>%
rename(id = snps) -> c
head(c)
x <- merge(c, maf_df, by="id", all.x = T)
dim(x)
q <- data.frame("id" = cis_eqtls$snps)
x <- merge(q, maf_df, by="id", all.x = T)
head(q)
head(x)
cis_eqtls %>%
arrange(snps) %>%
head
library(tidyverse)
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snps)[2]
return (freq)
}
get_maf <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
maf <- apply(allele_freq, 1, min)
return (maf)
}
maf_df <- data.frame("id" = snp_ceu_20$id, "maf" = get_maf(snp_ceu_20))
temp_df <- data.frame("id" = cis_eqtls$snps)
temp_df <- merge(temp_df, maf_df, by="id", all.x = T)
cis_eqtls %>% arrange(snps) -> cis_eqtls
cis_eqtls$maf <- temp_df$maf
cis_eqtls
head(cis_eqtls)
head(temp_df)
head(cis_eqtls)
snp_ceu_20[1:5, 1:5]
dim(snp_ceu_20)
dim(snp_ceu_20)[2] - 1
library(tidyverse)
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snps)[2]
return (freq)
}
get_maf <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
maf <- apply(allele_freq, 1, min)
return (maf)
}
pve <- function(b, b_se, maf, N){
return(
(2*(b^2)*maf*(1-maf))/(
(2*(b^2)*maf*(1-maf)) + (b_se^2)*2*N*maf(1-maf)
)
)
}
maf_df <- data.frame("id" = snp_ceu_20$id, "maf" = get_maf(snp_ceu_20))
temp_df <- data.frame("id" = cis_eqtls$snps)
temp_df <- merge(temp_df, maf_df, by="id", all.x = T)
cis_eqtls %>% arrange(snps) -> cis_eqtls
cis_eqtls$maf <- temp_df$maf
N <- dim(snp_ceu_20)[2] - 1
cis_eqtls$pve <- pve(cis_eqtls$beta, cis_eqtls$beta_se, cis_eqtls$maf, N)
library(tidyverse)
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snps)[2]
return (freq)
}
get_maf <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
maf <- apply(allele_freq, 1, min)
return (maf)
}
pve <- function(b, b_se, maf, N){
return(
(2*(b^2)*maf*(1-maf))/(
(2*(b^2)*maf*(1-maf)) + (b_se^2)*2*N*maf*(1-maf)
)
)
}
maf_df <- data.frame("id" = snp_ceu_20$id, "maf" = get_maf(snp_ceu_20))
temp_df <- data.frame("id" = cis_eqtls$snps)
temp_df <- merge(temp_df, maf_df, by="id", all.x = T)
cis_eqtls %>% arrange(snps) -> cis_eqtls
cis_eqtls$maf <- temp_df$maf
N <- dim(snp_ceu_20)[2] - 1
cis_eqtls$pve <- pve(cis_eqtls$beta, cis_eqtls$beta_se, cis_eqtls$maf, N)
head(cis_eqtls)
hist(cis_eqtls$pve)
hist(cis_eqtls$pve)
library(tidyverse)
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snps)[2]
return (freq)
}
get_maf <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
maf <- apply(allele_freq, 1, min)
return (maf)
}
pve <- function(b, b_se, maf, N){
return(
(2*(b^2)*maf*(1-maf))/(
(2*(b^2)*maf*(1-maf)) + (b_se^2)*2*N*maf*(1-maf)
)
)
}
maf_df <- data.frame("id" = snp_ceu_20$id, "maf" = get_maf(snp_ceu_20))
temp_df <- data.frame("id" = cis_eqtls$snps)
temp_df <- merge(temp_df, maf_df, by="id", all.x = T)
cis_eqtls %>% arrange(snps) -> cis_eqtls
cis_eqtls$maf <- temp_df$maf
N <- dim(snp_ceu_20)[2] - 1
cis_eqtls$pve <- pve(cis_eqtls$beta, cis_eqtls$beta_se, cis_eqtls$maf, N)
hist(cis_eqtls$pve)
cis_eqtls %>%
head
cis_eqtls %>%
arrange(desc(pve)) %>%
head
cis_eqtls %>%
arrange(desc(pve)) %>%
head(1)
cis_eqtls %>%
arrange(desc(pve)) %>%
head(1) %>%
select(gene)
