gene2_africa <- get_pop_gene(gene2, "YRI", gene_expr, design)
gene2_nonafrica <- get_pop_gene(gene2, "YRI", gene_expr, design, T)
dim(gene2_africa)
dim(non_african_snps)
dim(gene2_nonafrica)
dim(african_snps)
#african_genes <- filter_snp_population("YRI", gene_expr, design)
#non_african_genes <- filter_snp_population("YRI", gene_expr, design, inv = T)
get_pop_gene <- function(genes, pop, gene_mat, design_mat, inv = F){
genes_table <- filter_snp_population(pop, gene_mat, design_mat, inv)
genes <- genes_table[genes,]
return(genes)
}
#make african model
gene2_africa <- get_pop_gene(gene2, "YRI", gene_expr, design)
snp2_africa <- t(snp2_africa)[,snp2]
snp2
snp2_africa
#african_genes <- filter_snp_population("YRI", gene_expr, design)
#non_african_genes <- filter_snp_population("YRI", gene_expr, design, inv = T)
get_pop_gene <- function(genes, pop, gene_mat, design_mat, inv = F){
genes_table <- filter_snp_population(pop, gene_mat, design_mat, inv)
genes <- genes_table[genes,]
return(genes)
}
#make african model
gene2_africa <- get_pop_gene(gene2, "YRI", gene_expr, design)
snp2_africa <- t(african_snps)[,snp2]
lm_africa <- lm(gene2_africa ~ snp2_africa)
snp2_africa
dim(gene2_africa)
dim(snp2_africa)
gene2_africa
gene2_africa
gene2_africa %>% t
t(gene2_africa)
snp2_africa
gene2_africa
t(gene2_africa)
t(gene2_africa)$EENSG00000100266.11
dim(t(gene2_africa))
as.vector(snp2_africa)
gene2_col
gene2_col
gene2_snp
snp2_africa
gene2_africa
#african_genes <- filter_snp_population("YRI", gene_expr, design)
#non_african_genes <- filter_snp_population("YRI", gene_expr, design, inv = T)
get_pop_gene <- function(genes, pop, gene_mat, design_mat, inv = F){
genes_table <- filter_snp_population(pop, gene_mat, design_mat, inv)
genes <- t(genes_table)[,genes]
return(genes)
}
#make african model
gene2_africa <- get_pop_gene(gene2, "YRI", gene_expr, design)
snp2_africa <- t(african_snps)[,snp2]
lm_africa <- lm(gene2_africa ~ snp2_africa)
summary(lm_africa)
#make non african model
gene2_nonafrica <- get_pop_gene(gene2, "YRI", gene_expr, design, T)
snp2_nonafrica <- t(non_african_snps)[,snp2]
lm_nonafrica <- lm(gene2_nonafrica ~ snp2_nonafrica)
summary(lm_nonafrica)
pc
design$Source.Name
rownames(pc) == design$Source.Name
design$Characteristics.population.
pc_df <- data.frame(PC1=pc$PC1, PC2=pc$PC2, Population=design$Characteristics.population.)
library(tidyverse)
pc_df %>%
head
pc_df %>%
grather(-Population, key="PC", value="value") %>%
head
pc_df %>%
gather(-Population, key="PC", value="value") %>%
head
pc_df %>%
gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC, y=value)) + geom_dotplot()
pc_df %>%
gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC, y=Value)) + geom_dotplot()
pc_df %>%
gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC, y=Value)) + geom_dotplot()
pc_df %>%
gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC, y=Value)) + geom_dotplot(binaxis = "y")
pc_df %>%
gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC, y=Value)) + geom_dotplot(binaxis = "y", binwidth = 100)
pc_df %>%
gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC, y=Value)) + geom_dotplot(binaxis = "y", binwidth = 1)
pc_df %>%
gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC, y=Value, col=Population)) + geom_dotplot(binaxis = "y", binwidth = 1)
pc_df %>%
gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC, y=Value, fill=Population)) + geom_dotplot(binaxis = "y", binwidth = 1)
pc_df %>%
gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC, y=Value, fill=Population)) +
geom_dotplot(binaxis = "y", binwidth = 10)
pc_df
pc_df %>%
head
pc_df %>%
#gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC1, y=PC2, fill=Population)) +
geom_point()
pc_df %>%
#gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC1, y=PC2, col=Population)) +
geom_point()
library(tidyverse)
pc_df <- data.frame(PC1=pc$PC1, PC2=pc$PC2, Population=design$Characteristics.population.)
pc_df %>%
#gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC1, y=PC2, col=Population)) +
geom_point()
library(tidyverse)
pc_df <- data.frame(PC1=pc$PC1, PC2=pc$PC2, Population=design$Characteristics.population.)
pc_df %>%
#gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC1, y=PC2, col=Population)) +
geom_point()
gene2 <- "ENSG00000100266.11"
snp2 <- "snp_22_43336231"
gene2_col <- t(gene_expr)[,gene2]
gene2_snp <- t(snps_filtered)[,snp2]
lm_no_cov <- lm(gene2_col ~ gene2_snp)
summary(lm_no_cov)
pc <- read.table("pc_cvrt.tab")
lm_pc <- lm(gene2_col ~ gene2_snp + pc$PC1 + pc$PC2 + pc$PC3 + pc$PC4 + pc$PC5)
summary(lm_pc)
gene2 <- "ENSG00000100266.11"
snp2 <- "snp_22_43336231"
gene2_col <- t(gene_expr)[,gene2]
gene2_snp <- t(snps_filtered)[,snp2]
lm_no_cov <- lm(gene2_col ~ gene2_snp)
summary(lm_no_cov)
pc <- read.table("pc_cvrt.tab")
lm_pc <- lm(gene2_col ~ gene2_snp + pc$PC1 + pc$PC2 + pc$PC3 + pc$PC4 + pc$PC5)
summary(lm_pc)
get_pop_gene <- function(genes, pop, gene_mat, design_mat, inv = F){
genes_table <- filter_snp_population(pop, gene_mat, design_mat, inv)
genes <- t(genes_table)[,genes]
return(genes)
}
#make african model
gene2_africa <- get_pop_gene(gene2, "YRI", gene_expr, design)
snp2_africa <- t(african_snps)[,snp2]
lm_africa <- lm(gene2_africa ~ snp2_africa)
summary(lm_africa)
#make non african model
gene2_nonafrica <- get_pop_gene(gene2, "YRI", gene_expr, design, T)
snp2_nonafrica <- t(non_african_snps)[,snp2]
lm_nonafrica <- lm(gene2_nonafrica ~ snp2_nonafrica)
summary(lm_nonafrica)
snps_filtered
snps_filtered %>% head
snps_filtered %>% dim
gene2_col
gene2_snp
snps_filtered %>% head
gene_expr %>% head
gene_expr[1,]
snps_filtered[1,]
lm(gene_expr[1,] ~ snps_filtered[1,])
gene_expr[1,]
g <- t(gene_expr)
g[,1]
g %>% head
s <- t(snps_filtered)
lm(g[,1] ~ s[,1])
g <- t(gene_expr)
s <- t(snps_filtered)
lm(g[,1] ~ s[,1])
summary(lm(g[,1] ~ s[,1]))
x<- lm(g[,1] ~ s[,1])
x$coefficients
y<- lm(g ~ s)
summary(y)
x<- lm(g[,1] ~ s[,1])
x$effects
x$terms
x$coefficients
x$residuals
x$effects
x$rank
x$fitted.values
x$qr
x$df.residual
x$model
x <- summary(y)
x<- lm(g[,1] ~ s[,1])
x <- summary(y)
y<- lm(g ~ s)
x <- summary(y)
x$`Response ENSG00000185386.10`
x
x<- lm(g[,1] ~ s[,1])
summary(x)
library(tidyverse)
y <- broom::tidy(x)
y
summary(x)
x <- summary(x)
x$terms
x$residuals
x$coefficients
get_values <- function(expr, snps){
model <- summary(lm(expr ~ snps))
return(model$coefficients)
}
q <- get_values(g, s)
q
g
g[,1]
g
g[,1]
q <- lapply(g, get_values, s)
lapply(g, function(x) print(x))
g
q <- as.data.frame(g)
lapply(g, function(x) print(x))
lapply(q, function(x) print(x))
gene_t <- as.data.frame(t(gene_expr))
gene_t
snps_filtered_t <- as.data.frame(t(snps_filtered))
q <- lapply(gene_t, get_values, snps_filtered_t)
q <- mapply(get_values, gene_t, snps_filtered_t)
q
t(q)
head(gene_t)
head(gene_t$ENSG00000185386.10)
View(snps_filtered_t)
View(snps_filtered_t)
View(gene_t)
View(gene_t)
summay(lm(gene_t$ENSG00000185386.10 ~ snps_filtered_t$snp_22_30772686))
summary(lm(gene_t$ENSG00000185386.10 ~ snps_filtered_t$snp_22_30772686))
summary(lm(gene_t$ENSG00000185386.10 ~ snps_filtered_t$snp_22_30772686))$coefficients
t(q)[1,]
summary(lm(gene_t$ENSG00000185386.10 ~ snps_filtered_t$snp_22_30772686))$coefficients[2,]
get_values <- function(expr, snps){
model <- summary(lm(expr ~ snps))
return(model$coefficients[2,])
}
q <- mapply(get_values, gene_t, snps_filtered_t)
t(q)[1,]
t(q)
knitr::opts_chunk$set(echo = TRUE)
gene_t <- as.data.frame(t(gene_expr))
snps_filtered_t <- as.data.frame(t(snps_filtered))
get_lm_values <- function(expr, snps){
model <- summary(lm(expr ~ snps))
return(model$coefficients[2,])
}
lm_matrix <- mapply(get_values, gene_t, snps_filtered_t)
dim(gene_t)
dim(lm_matrix)
head(lm_matrix)
gene_t <- as.data.frame(t(gene_expr))
snps_filtered_t <- as.data.frame(t(snps_filtered))
get_lm_values <- function(expr, snps){
model <- summary(lm(expr ~ snps))
return(model$coefficients[2,])
}
lm_matrix <- mapply(get_values, gene_t, snps_filtered_t)
lm_matrix <- t(lm_matrix)
head(lm_matrix)
gene_t <- as.data.frame(t(gene_expr))
snps_filtered_t <- as.data.frame(t(snps_filtered))
get_lm_values <- function(expr, snps){
model <- summary(lm(expr ~ snps))
return(model$coefficients[2,])
}
lm_matrix <- mapply(get_values, gene_t, snps_filtered_t)
lm_matrix <- as.data.frame(t(lm_matrix))
head(lm_matrix)
View(lm_matrix)
View(lm_matrix)
lm_matrix$gene_id <- rownames(lm_matrix)
View(lm_matrix)
View(lm_matrix)
lm_matrix$snp_id <- colnames(snps_filtered_t)
View(lm_matrix)
View(lm_matrix)
rownames(lm_matrix) <- NULL
lm_matrix$`Std. Error` <- NULL
View(lm_matrix)
View(lm_matrix)
gene_t <- as.data.frame(t(gene_expr))
snps_filtered_t <- as.data.frame(t(snps_filtered))
get_lm_values <- function(expr, snps){
model <- summary(lm(expr ~ snps))
return(model$coefficients[2,])
}
lm_matrix <- mapply(get_values, gene_t, snps_filtered_t)
lm_matrix <- as.data.frame(t(lm_matrix))
lm_matrix$gene_id <- rownames(lm_matrix)
lm_matrix$snp_id <- colnames(snps_filtered_t)
rownames(lm_matrix) <- NULL
#lm_matrix <- lm_matrix[,c(4,5,)]
View(lm_matrix)
View(lm_matrix)
gene_t <- as.data.frame(t(gene_expr))
snps_filtered_t <- as.data.frame(t(snps_filtered))
get_lm_values <- function(expr, snps){
model <- summary(lm(expr ~ snps))
return(model$coefficients[2,])
}
lm_matrix <- mapply(get_values, gene_t, snps_filtered_t)
lm_matrix <- as.data.frame(t(lm_matrix))
lm_matrix$gene_id <- rownames(lm_matrix)
lm_matrix$snp_id <- colnames(snps_filtered_t)
rownames(lm_matrix) <- NULL
lm_matrix <- lm_matrix[,c(5,6,1,3,4)]
colnames(lm_matrix) <- c("gene id", "snp id", "effect size", "t value", "p value")
head(lm_matrix)
View(lm_matrix)
View(lm_matrix)
View(lm_matrix)
fdrtool::fdrtool(lm_matrix$`p value`)
gene_t <- as.data.frame(t(gene_expr))
snps_filtered_t <- as.data.frame(t(snps_filtered))
get_lm_values <- function(expr, snps){
model <- summary(lm(expr ~ snps))
return(model$coefficients[2,])
}
lm_matrix <- mapply(get_values, gene_t, snps_filtered_t)
lm_matrix <- as.data.frame(t(lm_matrix))
lm_matrix$gene_id <- rownames(lm_matrix)
lm_matrix$snp_id <- colnames(snps_filtered_t)
rownames(lm_matrix) <- NULL
lm_matrix <- lm_matrix[,c(5,6,1,3,4)]
colnames(lm_matrix) <- c("gene_id", "snp_id", "effect_size", "t.value", "p.value")
head(lm_matrix)
fdrtool::fdrtool(lm_matrix$p.value)
View(lm_matrix)
View(lm_matrix)
corrected_pval <- fdrtool::fdrtool(lm_matrix$p.value)
pc
dim(gene_t)
dim(pc)
x<- lm(g[,1] ~ s[,1] + pc$PC1)
summary(x)
corrected_pval <- fdrtool::fdrtool(lm_matrix$p.value, statistic = "pvalue")
corrected_pval <- p.adjust(lm_matrix$p.value, method = "fdr")
corrected_pval
View(pc_df)
View(pc_df)
get_lm_values_covariate <- function(expr, snps){
model <- summary(lm(expr ~ snps + pc$PC1 + pc$PC2 + pc$PC3 + pc$PC4 + pc$PC5))
return(model$coefficients[2,])
}
lm_matrix_cov <- mapply(get_lm_values_covariate, gene_t, snps_filtered_t)
t(lm_matrix_cov)
get_lm_matrix <- function(expr, snps, fun){
lm_matrix <- mapply(fun, expr, snps)
lm_matrix <- as.data.frame(t(lm_matrix))
lm_matrix$gene_id <- rownames(lm_matrix)
lm_matrix$snp_id <- colnames(snps)
rownames(lm_matrix) <- NULL
lm_matrix <- lm_matrix[,c(5,6,1,3,4)]
colnames(lm_matrix) <- c("gene_id", "snp_id", "effect_size", "t.value", "p.value")
return(lm_matrix)
}
x <- get_lm_matrix(gene_t, snps_filtered_t, get_lm_values)
View(x)
get_lm_values_covariate <- function(expr, snps){
model <- summary(lm(expr ~ snps + pc$PC1 + pc$PC2 + pc$PC3 + pc$PC4 + pc$PC5))
return(model$coefficients[2,])
}
lm_matrix_cov <- get_lm_matrix(gene_t, snps_filtered_t, get_lm_values_covariate)
get_lm_values_covariate <- function(expr, snps){
model <- summary(lm(expr ~ snps + pc$PC1 + pc$PC2 + pc$PC3 + pc$PC4 + pc$PC5))
return(model$coefficients[2,])
}
lm_matrix_cov <- get_lm_matrix(gene_t, snps_filtered_t, get_lm_values_covariate)
lm_matrix_cov$p.adj <- p.adjust(lm_matrix_cov$p.value, method = "fdr")
head(lm_matrix_cov)
lm_matrix_cov %>%
head
library(tidyverse)
lm_matrix_cov %>%
head
lm_matrix_cov %>%
filter(p.adj < 0.05)
library(tidyverse)
pc_df <- data.frame(PC1=pc$PC1, PC2=pc$PC2, Population=design$Characteristics.population.)
pc_df %>%
#gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC1, y=PC2, col=Population)) +
geom_point()
lm_matrix_cov %>%
filter(p.adj < 0.05)
lm_matrix_cov %>%
filter(p.adj == min(lm_matrix_cov$p.adj))
knitr::opts_chunk$set(echo = TRUE)
df
snps1 <- c("snp_22_41256802", "snp_22_45782142")
gene1_col <- t(gene_expr[gene1,])
snps1_col <- t(snps_filtered[snps1,])
df <- cbind(snps1_col, gene1_col)
colnames(df) <- c(snps1, "expression")
df <- df %>%
as_tibble %>%
gather(-expression, key="SNP", value ="genotype")
df$genotype <- as.factor(df$genotype)
df
lm_matrix_cov
lm_matrix_cov$p.adj == min(lm_matrix_cov$p.adj)
lm_matrix_cov,lm_matrix_cov$p.adj == min(lm_matrix_cov$p.adj),]
lm_matrix_cov[lm_matrix_cov$p.adj == min(lm_matrix_cov$p.adj),]
lm_matrix_cov[lm_matrix_cov$p.adj == min(lm_matrix_cov$p.adj),]
sig_row <- lm_matrix_cov[lm_matrix_cov$p.adj == min(lm_matrix_cov$p.adj),]
df <- data.frame(expr = gene_expr[sig_row$gene_id], snp = snps_filtered[sig_row$snp_id])
snps_filtered[sig_row$snp_id]
sig_row
sig_row$gene_id
gene_expr[sig_row$gene_id]
gene_expr[sig_row$gene_id,]
df <- data.frame(expr = gene_expr[sig_row$gene_id,], snp = snps_filtered[sig_row$snp_id,])
df
dim(df)
gene_expr[sig_row$gene_id,]
dim(gene_expr[sig_row$gene_id,])
dim(snps_filtered[sig_row$snp_id,])
gene_expr[sig_row$gene_id,]
as.vector(gene_expr[sig_row$gene_id,])
df <- data.frame(expr = as.vector(gene_expr[sig_row$gene_id,]),
snp = as.vector(snps_filtered[sig_row$snp_id,]))
dim(df)
gene_expr_t[,sig_row$gene_id]
df <- data.frame(expr = gene_t[,sig_row$gene_id]),
snp = as.vector(snps_filtered[sig_row$snp_id,]))
gene_t[,sig_row$gene_id]
df <- data.frame(expr = gene_t[,sig_row$gene_id]),
snp = snps_filtered_t[,sig_row$snp_id]))
dim(df)
snps_filtered_t[,sig_row$snp_id]
df <- data.frame(expr = gene_t[,sig_row$gene_id]),
snp = snps_filtered_t[,sig_row$snp_id]))
df <- data.frame(expr = gene_t[,sig_row$gene_id],
snp = snps_filtered_t[,sig_row$snp_id])
dim(df)
df %>% head
df %>%
ggplot(aes(x=snp, y=expr)) + geom_boxplot()
df <- data.frame(expr = gene_t[,sig_row$gene_id],
snp = as.factor(snps_filtered_t[,sig_row$snp_id]))
df %>%
ggplot(aes(x=snp, y=expr)) + geom_boxplot()
df <- data.frame(Expression = gene_t[,sig_row$gene_id],
Genotype = as.factor(snps_filtered_t[,sig_row$snp_id]))
df %>%
ggplot(aes(x=Genotype, y=Expression)) + geom_boxplot()
sig_row <- lm_matrix_cov[lm_matrix_cov$p.adj == min(lm_matrix_cov$p.adj),]
df <- data.frame(Expression = gene_t[,sig_row$gene_id],
Genotype = as.factor(snps_filtered_t[,sig_row$snp_id]))
df %>%
ggplot(aes(x=Genotype, y=Expression)) + geom_boxplot()
get_lm_values_covariate <- function(expr, snps){
model <- summary(lm(expr ~ snps + pc$PC1 + pc$PC2 + pc$PC3 + pc$PC4 + pc$PC5))
return(model$coefficients[2,])
}
lm_matrix_cov <- get_lm_matrix(gene_t, snps_filtered_t, get_lm_values_covariate)
lm_matrix_cov$p.adj <- p.adjust(lm_matrix_cov$p.value, method = "fdr")
lm_matrix_cov %>%
filter(p.adj < 0.05)
lm_matrix_cov %>%
filter(p.adj < 0.05)
lm_matrix_cov %>%
filter(p.adj < 0.05)
lm_matrix$p.adj <- p.adjust(lm_matrix$p.value, method = "fdr")
lm_matrix %>%
filter(p.adj < 0.05)
lm_matrix %>%
filter(p.adj < 0.05)
lm_matrix_cov %>%
filter(p.adj < 0.05)
lm_matrix %>%
filter(p.adj < 0.05)
library(MatrixEQTL)
snps <- SlicedData$new()
snps$CreateFromMatrix(as.matrix(filt_geno)) #filt_geno is your filtered genotype matrix
library(MatrixEQTL)
snps <- SlicedData$new()
snps$CreateFromMatrix(as.matrix(snps_filtered)) #filt_geno is your filtered genotype matrix
genes <- SlicedData$new()
genes$CreateFromMatrix(as.matrix(gene_expr)) #expr is the unchanged expression matrix
snp_pos <- read.table("sample_geno.pos",sep="\t",header=T)
snp_pos <- snp_pos[snp_pos$snp %in% row.names(filt_geno),]
library(MatrixEQTL)
snps <- SlicedData$new()
snps$CreateFromMatrix(as.matrix(snps_filtered)) #filt_geno is your filtered genotype matrix
genes <- SlicedData$new()
genes$CreateFromMatrix(as.matrix(gene_expr)) #expr is the unchanged expression matrix
snp_pos <- read.table("sample_geno.pos",sep="\t",header=T)
snp_pos <- snp_pos[snp_pos$snp %in% row.names(snps_filtered),]
gene_pos <- read.table("sample_expr.pos",sep="\t",header=T)
all(colnames(snps) == colnames(genes))
eQTL <- Matrix_eQTL_main(snps, genes, output_file_name=NULL,
output_file_name.cis=NULL,
pvOutputThreshold.cis=1, pvOutputThreshold=1,
snpspos=snp_pos, genepos=gene_pos,
cisDist = 0)
