get_lm_matrix <- function(expr, snps, fun){
lm_matrix <- mapply(fun, expr, snps)
lm_matrix <- as.data.frame(t(lm_matrix))
lm_matrix$gene_id <- rownames(lm_matrix)
lm_matrix$snp_id <- colnames(snps)
rownames(lm_matrix) <- NULL
lm_matrix <- lm_matrix[,c(5,6,1,3,4)]
colnames(lm_matrix) <- c("gene_id", "snp_id", "effect_size", "t.value", "p.value")
return(lm_matrix)
}
lm_matrix <- get_lm_matrix(gene_t, snps_filtered_t, get_lm_values)
head(lm_matrix)
View(lm_matrix)
gene_t
snps_filtered_t
knitr::opts_chunk$set(echo = TRUE)
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snps)[2]
return (freq)
}
get_maf <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
maf <- apply(allele_freq, 1, min)
return (maf)
}
maf <- get_maf(snps)
snps <- read.table("sub_geno.tab")
snps <- read.table("data/sub_geno.tab")
missing_count <- apply((snps == -1), 1, sum)
head(missing_count)
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snps)[2]
return (freq)
}
get_maf <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
maf <- apply(allele_freq, 1, min)
return (maf)
}
maf <- get_maf(snps)
head(maf)
keep <- maf >= 0.05 & missing_count == 0
snps_filtered <- snps[keep,]
dim(snps_filtered)
design <- read.table("design.tab", header = T, sep = "\t")
design <- read.table("data/design.tab", header = T, sep = "\t")
filter_snp_population <- function(pop, snp_mat, design_mat, inv=F){
if(inv){
cols <- design_mat$Source.Name[design_mat$Characteristics.population. != pop]
} else{
cols <- design_mat$Source.Name[design_mat$Characteristics.population. == pop]
}
snp_mat <- (snp_mat[, cols])
return(snp_mat)
}
african_snps <- filter_snp_population("YRI", snps_filtered, design)
non_african_snps <- filter_snp_population("YRI", snps_filtered, design, inv = T)
african_maf <- get_maf(african_snps)
non_african_maf <- get_maf(non_african_snps)
print("African")
print(head(african_maf))
print("Non-African")
print(head(non_african_maf))
View(african_snps)
print(data.frame("african" = african_maf, "non african" = non_african_maf))
design <- read.table("data/design.tab", header = T, sep = "\t")
filter_snp_population <- function(pop, snp_mat, design_mat, inv=F){
if(inv){
cols <- design_mat$Source.Name[design_mat$Characteristics.population. != pop]
} else{
cols <- design_mat$Source.Name[design_mat$Characteristics.population. == pop]
}
snp_mat <- (snp_mat[, cols])
return(snp_mat)
}
african_snps <- filter_snp_population("YRI", snps_filtered, design)
non_african_snps <- filter_snp_population("YRI", snps_filtered, design, inv = T)
african_maf <- get_maf(african_snps)
non_african_maf <- get_maf(non_african_snps)
print("African")
print(head(african_maf))
print("Non-African")
print(head(non_african_maf))
print(data.frame("african" = african_maf, "non african" = non_african_maf))
design <- read.table("data/design.tab", header = T, sep = "\t")
filter_snp_population <- function(pop, snp_mat, design_mat, inv=F){
if(inv){
cols <- design_mat$Source.Name[design_mat$Characteristics.population. != pop]
} else{
cols <- design_mat$Source.Name[design_mat$Characteristics.population. == pop]
}
snp_mat <- (snp_mat[, cols])
return(snp_mat)
}
african_snps <- filter_snp_population("YRI", snps_filtered, design)
non_african_snps <- filter_snp_population("YRI", snps_filtered, design, inv = T)
african_maf <- get_maf(african_snps)
non_african_maf <- get_maf(non_african_snps)
print("African")
print(head(african_maf))
print("Non-African")
print(head(non_african_maf))
data.frame("african" = african_maf, "non african" = non_african_maf)
design <- read.table("data/design.tab", header = T, sep = "\t")
filter_snp_population <- function(pop, snp_mat, design_mat, inv=F){
if(inv){
cols <- design_mat$Source.Name[design_mat$Characteristics.population. != pop]
} else{
cols <- design_mat$Source.Name[design_mat$Characteristics.population. == pop]
}
snp_mat <- (snp_mat[, cols])
return(snp_mat)
}
african_snps <- filter_snp_population("YRI", snps_filtered, design)
non_african_snps <- filter_snp_population("YRI", snps_filtered, design, inv = T)
african_maf <- get_maf(african_snps)
non_african_maf <- get_maf(non_african_snps)
# print("African")
# print(head(african_maf))
# print("Non-African")
# print(head(non_african_maf))
data.frame("african" = african_maf, "non african" = non_african_maf)
# print("African")
# print(head(african_maf))
# print("Non-African")
# print(head(non_african_maf))
x <- data.frame("african" = african_maf, "non african" = non_african_maf)
View(x)
gene_expr <- read.table("sub_expr.tab")
gene_expr <- read.table("data/sub_expr.tab")
gene1 <- c("ENSG00000172404.4")
hist(as.matrix(gene_expr[gene1,]), main=gene1, xlab="Gene Expression Level")
knitr::opts_chunk$set(echo = TRUE)
# print("African")
# print(head(african_maf))
# print("Non-African")
# print(head(non_african_maf))
rm(x)
design <- read.table("data/design.tab", header = T, sep = "\t")
filter_snp_population <- function(pop, snp_mat, design_mat, inv=F){
if(inv){
cols <- design_mat$Source.Name[design_mat$Characteristics.population. != pop]
} else{
cols <- design_mat$Source.Name[design_mat$Characteristics.population. == pop]
}
snp_mat <- (snp_mat[, cols])
return(snp_mat)
}
african_snps <- filter_snp_population("YRI", snps_filtered, design)
non_african_snps <- filter_snp_population("YRI", snps_filtered, design, inv = T)
african_maf <- get_maf(african_snps)
non_african_maf <- get_maf(non_african_snps)
print("African")
print(head(african_maf))
print("Non-African")
print(head(non_african_maf))
library(tidyverse)
snps1 <- c("snp_22_41256802", "snp_22_45782142")
gene1_col <- t(gene_expr[gene1,])
snps1_col <- t(snps_filtered[snps1,])
df <- cbind(snps1_col, gene1_col)
colnames(df) <- c(snps1, "expression")
df <- df %>%
as_tibble %>%
gather(-expression, key="SNP", value ="genotype")
df$genotype <- as.factor(df$genotype)
df %>%
ggplot(aes(x=genotype, y=expression)) + geom_boxplot() +
facet_wrap(~SNP)
lm_snp_a <- lm(gene1_col ~ snps1_col[,1])
summary(lm_snp_a)
lm_snp_b <- lm(gene1_col ~ snps1_col[,2])
summary(lm_snp_b)
gene2 <- "ENSG00000100266.11"
snp2 <- "snp_22_43336231"
gene2_col <- t(gene_expr)[,gene2]
gene2_snp <- t(snps_filtered)[,snp2]
lm_no_cov <- lm(gene2_col ~ gene2_snp)
summary(lm_no_cov)
pc <- read.table("data/pc_cvrt.tab")
lm_pc <- lm(gene2_col ~ gene2_snp + pc$PC1 + pc$PC2 + pc$PC3 + pc$PC4 + pc$PC5)
summary(lm_pc)
get_pop_gene <- function(genes, pop, gene_mat, design_mat, inv = F){
genes_table <- filter_snp_population(pop, gene_mat, design_mat, inv)
genes <- t(genes_table)[,genes]
return(genes)
}
#make african model
gene2_africa <- get_pop_gene(gene2, "YRI", gene_expr, design)
snp2_africa <- t(african_snps)[,snp2]
lm_africa <- lm(gene2_africa ~ snp2_africa)
summary(lm_africa)
#make non african model
gene2_nonafrica <- get_pop_gene(gene2, "YRI", gene_expr, design, T)
snp2_nonafrica <- t(non_african_snps)[,snp2]
lm_nonafrica <- lm(gene2_nonafrica ~ snp2_nonafrica)
summary(lm_nonafrica)
library(tidyverse)
pc_df <- data.frame(PC1=pc$PC1, PC2=pc$PC2, Population=design$Characteristics.population.)
pc_df %>%
#gather(-Population, key="PC", value="Value") %>%
ggplot(aes(x=PC1, y=PC2, col=Population)) +
geom_point()
gene_t <- as.data.frame(t(gene_expr))
snps_filtered_t <- as.data.frame(t(snps_filtered))
get_lm_values <- function(expr, snps){
model <- summary(lm(expr ~ snps))
return(model$coefficients[2,])
}
get_lm_matrix <- function(expr, snps, fun){
lm_matrix <- mapply(fun, expr, snps)
lm_matrix <- as.data.frame(t(lm_matrix))
lm_matrix$gene_id <- rownames(lm_matrix)
lm_matrix$snp_id <- colnames(snps)
rownames(lm_matrix) <- NULL
lm_matrix <- lm_matrix[,c(5,6,1,3,4)]
colnames(lm_matrix) <- c("gene_id", "snp_id", "effect_size", "t.value", "p.value")
return(lm_matrix)
}
lm_matrix <- get_lm_matrix(gene_t, snps_filtered_t, get_lm_values)
head(lm_matrix)
View(lm_matrix)
lm_matrix$p.adj <- p.adjust(lm_matrix$p.value, method = "fdr")
lm_matrix %>%
filter(p.adj < 0.05)
get_lm_values_covariate <- function(expr, snps){
model <- summary(lm(expr ~ snps + pc$PC1 + pc$PC2 + pc$PC3 + pc$PC4 + pc$PC5))
return(model$coefficients[2,])
}
lm_matrix_cov <- get_lm_matrix(gene_t, snps_filtered_t, get_lm_values_covariate)
lm_matrix_cov$p.adj <- p.adjust(lm_matrix_cov$p.value, method = "fdr")
lm_matrix_cov %>%
filter(p.adj < 0.05)
View(lm_no_cov)
View(lm_matrix_cov)
View(lm_matrix_cov)
sig_row <- lm_matrix_cov[lm_matrix_cov$p.adj == min(lm_matrix_cov$p.adj),]
df <- data.frame(Expression = gene_t[,sig_row$gene_id],
Genotype = as.factor(snps_filtered_t[,sig_row$snp_id]))
df %>%
ggplot(aes(x=Genotype, y=Expression)) + geom_boxplot()
library(MatrixEQTL)
snps <- SlicedData$new()
snps$CreateFromMatrix(as.matrix(snps_filtered)) #filt_geno is your filtered genotype matrix
genes <- SlicedData$new()
genes$CreateFromMatrix(as.matrix(gene_expr)) #expr is the unchanged expression matrix
snp_pos <- read.table("data/sample_geno.pos",sep="\t",header=T)
snp_pos <- snp_pos[snp_pos$snp %in% row.names(snps_filtered),]
gene_pos <- read.table("data/sample_expr.pos",sep="\t",header=T)
all(colnames(snps) == colnames(genes))
eQTL <- Matrix_eQTL_main(snps, genes, output_file_name=NULL,
output_file_name.cis=NULL,
pvOutputThreshold.cis=1, pvOutputThreshold=1,
snpspos=snp_pos, genepos=gene_pos,
cisDist = 0)
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snp_mat)[2]
return (freq)
}
get_af <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
#maf <- apply(allele_freq, 1, min)
return (allele_freq)
}
allele_freq <- get_af(snp_ceu_20)
expr_ceu_20 <- read.table("data/expr_ceu_chr20.tab", header = T) #gene expr vs samps
gene_pos <- read.table("data/expr_chr20.pos", header = T)
snp_ceu_20 <- read.table("data/geno_ceu_chr20_strict.tab", header=T) #snp vs samps
snp_pos <- read.table("data/geno_ceu_chr20_strict.pos", header = T)
dim(expr_ceu_20)[2] -1
dim(snp_pos)[1]
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snp_mat)[2]
return (freq)
}
get_af <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
#maf <- apply(allele_freq, 1, min)
return (allele_freq)
}
allele_freq <- get_af(snp_ceu_20)
hist(allele_freq[,1])
hist(c(allele_freq[,1], allele_freq[,2])
#hist(allele_freq[,2])
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snp_mat)[2]
return (freq)
}
get_af <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
#maf <- apply(allele_freq, 1, min)
return (allele_freq)
}
allele_freq <- get_af(snp_ceu_20)
hist(allele_freq[,1])
hist(c(allele_freq[,1], allele_freq[,2]))
#hist(allele_freq[,2])
min(allele_freq[,1])
dim(expr_ceu_20)[1]
mean_expr <- apply(expr_ceu_20[,-1], 1 , mean)
expr_ceu_20[mean_expr == max(mean_expr)]
mean_expr <- apply(expr_ceu_20[,-1], 1 , mean)
expr_ceu_20[mean_expr == max(mean_expr),1]
View(expr_ceu_20)
#Matrix eQTL
library(MatrixEQTL)
# Genotype file names
SNP_file_name = "data/geno_ceu_chr20_strict.tab" ; #Genotype file path
snps_location_file_name = "data/geno_ceu_chr20_strict.pos" ; #snp position file path
# Gene expression file names
expression_file_name = "data/expr_ceu_chr20.tab" ;#Expression file path
gene_location_file_name = "data/expr_chr20.pos" ;#gene position file path
# Only associations significant at this level will be saved
pvOutputThreshold_cis = 1; #p.value threshold for cis eqtls
pvOutputThreshold_tra = 0; #p.value threshold for trans eqtls
#Covariates file names
covariates_file_name = character();# Set to character() for no covariates
# Distance for local gene-SNP pairs
cisDist = 1e6; #Define cis distance
## Load genotype data
snps = SlicedData$new();
snps$fileDelimiter = "\t"; # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1; # one row of column labels
snps$fileSkipColumns = 1; # one column of row labels
snps$fileSliceSize = 2000; # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
## Load gene expression data
gene = SlicedData$new();
gene$fileDelimiter = "\t"; # the TAB character
gene$fileOmitCharacters = "NA"; # denote missing values;
gene$fileSkipRows = 1; # one row of column labels
gene$fileSkipColumns = 1; # one column of row labels
gene$fileSliceSize = 2000; # read file in slices of 2,000 rows
gene$LoadFile(expression_file_name);
#Load position files
snpspos = read.table(snps_location_file_name, header = TRUE, stringsAsFactors = FALSE);
genepos = read.table(gene_location_file_name, header = TRUE, stringsAsFactors = FALSE);
## Run the analysis
me = Matrix_eQTL_main(
snps = snps,
gene = gene,
output_file_name=NULL,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = modelLINEAR,
errorCovariance =numeric(),
verbose = TRUE,
output_file_name.cis = NULL, #Do not write out cis results
pvOutputThreshold.cis = pvOutputThreshold_cis,
snpspos = snpspos,
genepos = genepos,
cisDist = cisDist,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE,
pvalue.hist = FALSE)
cis_eqtls = me$cis$eqtls[,-c(5)]
cis_eqtls["beta_se"] = cis_eqtls["beta"]/cis_eqtls["statistic"]
rm(me)
cis_eqtls$p.adj <- p.adjust(cis_eqtls$pvalue, method = "bonferroni")
sum(cis_eqtls$p.adj <= 0.05)
cis_eqtls[cis_eqtls$p.adj== min(cis_eqtls$p.adj),]
# Genotype file names
SNP_file_name = "data/geno_ceu_chr22_strict.tab" ; #Genotype file path
snps_location_file_name = "data/geno_ceu_chr22_strict.pos" ; #snp position file path
# Gene expression file names
expression_file_name = "data/expr_ceu_chr20.tab" ;#Expression file path
gene_location_file_name = "data/expr_chr20.pos" ;#gene position file path
# Only associations significant at this level will be saved
pvOutputThreshold_cis = 0; #p.value threshold for cis eqtls
pvOutputThreshold_tra = 1; #p.value threshold for trans eqtls
#Covariates file names
covariates_file_name = character();# Set to character() for no covariates
# Distance for local gene-SNP pairs
cisDist = 1e6; #Define cis distance
## Load genotype data
snps = SlicedData$new();
snps$fileDelimiter = "\t"; # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1; # one row of column labels
snps$fileSkipColumns = 1; # one column of row labels
snps$fileSliceSize = 2000; # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
## Load gene expression data
gene = SlicedData$new();
gene$fileDelimiter = "\t"; # the TAB character
gene$fileOmitCharacters = "NA"; # denote missing values;
gene$fileSkipRows = 1; # one row of column labels
gene$fileSkipColumns = 1; # one column of row labels
gene$fileSliceSize = 2000; # read file in slices of 2,000 rows
gene$LoadFile(expression_file_name);
#Load position files
snpspos = read.table(snps_location_file_name, header = TRUE, stringsAsFactors = FALSE);
genepos = read.table(gene_location_file_name, header = TRUE, stringsAsFactors = FALSE);
## Run the analysis
me = Matrix_eQTL_main(
snps = snps,
gene = gene,
output_file_name=NULL,
pvOutputThreshold = pvOutputThreshold_tra,
useModel = modelLINEAR,
errorCovariance =numeric(),
verbose = TRUE,
output_file_name.cis = NULL, #Do not write out cis results
pvOutputThreshold.cis = pvOutputThreshold_cis,
snpspos = snpspos,
genepos = genepos,
cisDist = cisDist,
min.pv.by.genesnp = FALSE,
noFDRsaveMemory = FALSE,
pvalue.hist = FALSE)
trans_eqtls = me$all$eqtls[,-c(5)]
trans_eqtls["beta_se"] = trans_eqtls["beta"]/trans_eqtls["statistic"]
rm(me)
trans_eqtls$p.adj <- p.adjust(trans_eqtls$pvalue, method = "bonferroni")
sum(trans_eqtls$p.adj <= 0.05)
qqp<-function(x, maxLogP=30,...){
x<-x[!is.na(x)]
if(!missing(maxLogP)){
x[x<10^-maxLogP]<-10^-maxLogP
}
N<-length(x)
chi1<-qchisq(1-x,1)
x<-sort(x)
e<- -log((1:N-0.5)/N,10)
plot(e,-log(x,10),ylab="Observed log10(p-value)",xlab="Expected log10(p-value)",...)
abline(0,1,col=2,lwd=2)
c95<-qbeta(0.95,1:N,N-(1:N)+1)
c05<-qbeta(0.05,1:N,N-(1:N)+1)
lines(e,-log(c95,10))
lines(e,-log(c05,10))
}
qqp(cis_eqtls$pvalue)
qqp(trans_eqtls$pvalue)
library(tidyverse)
get_geno_frequency <- function(geno, snp_mat){
boolean_matrix <- snp_mat == geno
count <- apply(boolean_matrix, 1, sum)
freq <- count/dim(snps)[2]
return (freq)
}
get_maf <- function(snp_mat){
genotypes <- c(0,1,2)
#get matrix of genotype frequencies
geno_freq <- sapply(genotypes, get_geno_frequency, snp_mat)
colnames(geno_freq) <- genotypes
allele_freq <- geno_freq + geno_freq[,2]/2
allele_freq <- allele_freq[,-2]
maf <- apply(allele_freq, 1, min)
return (maf)
}
pve <- function(b, b_se, maf, N){
return(
(2*(b^2)*maf*(1-maf))/(
(2*(b^2)*maf*(1-maf)) + (b_se^2)*2*N*maf*(1-maf)
)
)
}
maf_df <- data.frame("id" = snp_ceu_20$id, "maf" = get_maf(snp_ceu_20))
temp_df <- data.frame("id" = cis_eqtls$snps)
temp_df <- merge(temp_df, maf_df, by="id", all.x = T)
cis_eqtls %>% arrange(snps) -> cis_eqtls
cis_eqtls$maf <- temp_df$maf
N <- dim(snp_ceu_20)[2] - 1
cis_eqtls$pve <- pve(cis_eqtls$beta, cis_eqtls$beta_se, cis_eqtls$maf, N)
hist(cis_eqtls$pve)
cis_eqtls %>%
arrange(desc(pve)) %>%
head(1) %>%
select(gene)
cis_eqtls %>%
arrange(desc(pve)) %>%
head(1)
cis_eqtls %>%
arrange(desc(pve)) %>%
head(1)
