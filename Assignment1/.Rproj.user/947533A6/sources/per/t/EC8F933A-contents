get_likelihood_product <- function(genotype, base, quaity){
  probabilities <- get_base_probability(base, quaity, genotype)
  return (prod(probabilities))
}


get_posterior <- function(likelihood, theta){
  numerators <- likelihood * theta
  return (numerators/sum(numerators))
}

get_posterior_numerator <- function(base_probs, thetas){
  numerator <- base_probs * thetas
  return(numerator)
}


EMcoinStep<-function(pk,data){
  print("theta")
  print(pk)
  lik <- cbind(#likelihood of data assuming
    dbinom(data,10,pk[1]), #coin A
    dbinom(data,10,pk[2]) #coin B
  )
  print("likelihoods")
  print(lik)
  ##probabilty of coin given data
  wA<-  lik[,1]*0.7 / (lik[,1]*0.7 + lik[,2]*0.3)
  print("wA")
  print(wA)
  wB<-lik[,2]*0.3 / (lik[,1]*0.7 + lik[,2]*0.3)
  print("wB")
  print(wB)
  theta2 <- c(#n+1 parameter guess
    sum(data*wA)/sum(data*wA + (10-data)*wA),
    sum(data*wB)/sum(data*wB + (10-data)*wB)
  )
  print("theta2")
  print(theta2)
}
data <- c(5,9,8,4,7)
ptheta <- c(0.6,0.5)
pcoin <- c(0.7, 0.3)
EMcoinStep(pk,data)

EMcoint2(thetas, flips_heads, prob_coins){
  #calculate likelihoods
  likelihoods <- lapply(thetas, dbinom_custom, flips_heads, 10)
  #calculate posterior
  num <- mapply(l, as.list(prob_coins), FUN = function(x, y) x*y)
  den <- apply(num, 1, sum)
  posterior <-num/den
  
}

dbinom(5,10,0.6)

as.list(c(0.7, 0.3))

dbinom_custom <- function(z, x, n){
  return(dbinom(x, n, z))
}
post <- function(likelihoods, prob_coin){
  num <- likelihoods * prob_coin
  return(num)
  
}





post(pcoin[1], l)
list(0.7, 0.3)


l <-lapply(pk, dbinom_custom, data, 10)
lapply(l, post, pcoin)


test <- c("A", "A", "C", "T")
g <- as.list(c("A", "C", "G", "T"))
g

c <- lapply(g, get_base_count, test)
mapply(function(x, y) paste0(x, y), as.list(test), g)

x <-matrix(1:12, ncol = 4)
apply(x, 2, sum)
as.data.frame(x, colnames(unlist(g)))
colnames(x) <- c("A", "C", "G", "T")
x
as.list(x)
