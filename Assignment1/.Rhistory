bases <- strsplit(dat$bases,"")
## ascii qualities for individual 1
asciiQ <- strsplit(dat$Qscore,"") #ascii code
Q <- lapply(asciiQ, function(x) charToInt(x) - 33) # quality score
errors <- lapply(Q, function(x) 10^(-x/10)) # error probability
#delte useless files
rm(dat, asciiQ, Q)
# #test_new_thetas
# get_new_thetas(bases[[1]][1:10], errors[[1]][1:10])
#calculate allele frequencies
allele_freqs <- mapply(get_new_thetas, bases, errors)
allele_freqs <- t(allele_freqs)
#colnames(allele_freqs) <- c("A", "C", "G", "T")
head(allele_freqs)
uncertain_sites <- allele_freqs[apply(allele_freqs, 1, max) < 0.9,]
dim(uncertain_sites)
allele_freqs[apply(allele_freqs, 1, max) < 0.9 & apply(allele_freqs, 1, max) > 0,]
apply(allele_freqs, 1, max)
uncertain_sites <- allele_freqs[max_freq < 0.9 & max_freq > 0]
dim(uncertain_sites)
uncertain_sites
uncertain_sites <- allele_freqs[max_freq < 0.9 & max_freq > 0,]
max_freq <- apply(allele_freqs, 1, max)
uncertain_sites <- allele_freqs[max_freq < 0.9 & max_freq > 0,]
dim(uncertain_sites)
dim(uncertain_sites)[1]
get_new_thetas <- function(bases_vector, errors_vector){
#set initial frequencies and genotypes and varibales
thetas_new <- c(0.25, 0.25, 0.25, 0.25)
genotypes <- c("A", "C", "G", "T")
difference <- 1
iteration <- 0
#base_prob <- list(A, T, C, G), A = [b1..bN], T = [b1..bN]...
base_probabilities <- lapply(genotypes,
get_base_probability, bases_vector, errors_vector)
#get a list of counts for each base
base_counts <- lapply(as.list(genotypes), get_base_count, bases_vector)
#run EM algo
while (difference > 0.0001 | iteration > 10000){
thetas <- thetas_new
#E Step
#calculate posterior
numerators <- mapply(function(x, y) x*y, base_probabilities, as.list(thetas))
denominator <- apply(numerators, 1, sum)
posterior <- numerators/denominator
print("posterior")
print(posterior)
#M Step
#calculate posterior*base_count
numerators <- as.data.frame(posterior)
colnames(numerators) <- genotypes
numerators <- as.list(numerators)
numerators <- mapply(function(x, y) x*y, numerators, base_counts)
numerators <- apply(numerators, 2, sum)
denominator <- sum(numerators)
# print("numerators2")
# print(numerators)
# print("den")
# print(denominator)
#check for nan errors and calculate new thetas
if (is.nan(denominator) | denominator == 0){
thetas_new <- c(0, 0, 0, 0)
break
} else{
thetas_new <- numerators/denominator
}
difference <- max(abs(thetas_new - thetas))
iteration <- iteration + 1
# print("iteration")
# print(iteration)
# print("theta old, theta new")
# print(thetas)
# print(thetas_new)
# print("difference")
# print(difference)
}
return(thetas_new)
}
#test
get_new_thetas(bases[[1]][1:10], errors[[1]][1:10])
get_new_thetas <- function(bases_vector, errors_vector){
#set initial frequencies and genotypes and varibales
thetas_new <- c(0.25, 0.25, 0.25, 0.25)
genotypes <- c("A", "C", "G", "T")
difference <- 1
iteration <- 0
#base_prob <- list(A, T, C, G), A = [b1..bN], T = [b1..bN]...
base_probabilities <- lapply(genotypes,
get_base_probability, bases_vector, errors_vector)
#get a list of counts for each base
base_counts <- lapply(as.list(genotypes), get_base_count, bases_vector)
#run EM algo
while (difference > 0.0001 | iteration > 10000){
thetas <- thetas_new
#E Step
#calculate posterior
numerators <- mapply(function(x, y) x*y, base_probabilities, as.list(thetas))
denominator <- apply(numerators, 1, sum)
posterior <- numerators/denominator
print("posterior")
#print(posterior)
#M Step
#calculate posterior*base_count
x <- apply(posterior, 1, sum)
print(x)
numerators <- as.data.frame(posterior)
colnames(numerators) <- genotypes
numerators <- as.list(numerators)
numerators <- mapply(function(x, y) x*y, numerators, base_counts)
numerators <- apply(numerators, 2, sum)
denominator <- sum(numerators)
# print("numerators2")
# print(numerators)
# print("den")
# print(denominator)
#check for nan errors and calculate new thetas
if (is.nan(denominator) | denominator == 0){
thetas_new <- c(0, 0, 0, 0)
break
} else{
thetas_new <- numerators/denominator
}
difference <- max(abs(thetas_new - thetas))
iteration <- iteration + 1
# print("iteration")
# print(iteration)
# print("theta old, theta new")
# print(thetas)
# print(thetas_new)
# print("difference")
# print(difference)
}
return(thetas_new)
}
#test
get_new_thetas(bases[[1]][1:10], errors[[1]][1:10])
get_new_thetas <- function(bases_vector, errors_vector){
#set initial frequencies and genotypes and varibales
thetas_new <- c(0.25, 0.25, 0.25, 0.25)
genotypes <- c("A", "C", "G", "T")
difference <- 1
iteration <- 0
#base_prob <- list(A, T, C, G), A = [b1..bN], T = [b1..bN]...
base_probabilities <- lapply(genotypes,
get_base_probability, bases_vector, errors_vector)
#get a list of counts for each base
base_counts <- lapply(as.list(genotypes), get_base_count, bases_vector)
#run EM algo
while (difference > 0.0001 | iteration > 10000){
thetas <- thetas_new
#E Step
#calculate posterior
numerators <- mapply(function(x, y) x*y, base_probabilities, as.list(thetas))
denominator <- apply(numerators, 1, sum)
posterior <- numerators/denominator
print("posterior")
#print(posterior)
#M Step
#calculate posterior*base_count
x <- apply(posterior, 2, sum)
print(x)
numerators <- as.data.frame(posterior)
colnames(numerators) <- genotypes
numerators <- as.list(numerators)
numerators <- mapply(function(x, y) x*y, numerators, base_counts)
numerators <- apply(numerators, 2, sum)
denominator <- sum(numerators)
# print("numerators2")
# print(numerators)
# print("den")
# print(denominator)
#check for nan errors and calculate new thetas
if (is.nan(denominator) | denominator == 0){
thetas_new <- c(0, 0, 0, 0)
break
} else{
thetas_new <- numerators/denominator
}
difference <- max(abs(thetas_new - thetas))
iteration <- iteration + 1
# print("iteration")
# print(iteration)
# print("theta old, theta new")
# print(thetas)
# print(thetas_new)
# print("difference")
# print(difference)
}
return(thetas_new)
}
#test
get_new_thetas(bases[[1]][1:10], errors[[1]][1:10])
get_new_thetas <- function(bases_vector, errors_vector){
#set initial frequencies and genotypes and varibales
thetas_new <- c(0.25, 0.25, 0.25, 0.25)
genotypes <- c("A", "C", "G", "T")
difference <- 1
iteration <- 0
#base_prob <- list(A, T, C, G), A = [b1..bN], T = [b1..bN]...
base_probabilities <- lapply(genotypes,
get_base_probability, bases_vector, errors_vector)
#get a list of counts for each base
base_counts <- lapply(as.list(genotypes), get_base_count, bases_vector)
#run EM algo
while (difference > 0.0001 | iteration > 10000){
thetas <- thetas_new
#E Step
#calculate posterior
numerators <- mapply(function(x, y) x*y, base_probabilities, as.list(thetas))
denominator <- apply(numerators, 1, sum)
posterior <- numerators/denominator
print("posterior")
#print(posterior)
#M Step
#calculate posterior*base_count
posterior_sum <- apply(posterior, 2, sum)
denominator <- sum(posterior_sum)
#numerators <- as.data.frame(posterior)
#colnames(numerators) <- genotypes
#numerators <- as.list(numerators)
#numerators <- mapply(function(x, y) x*y, numerators, base_counts)
#numerators <- apply(numerators, 2, sum)
#denominator <- sum(numerators)
# print("numerators2")
# print(numerators)
# print("den")
# print(denominator)
#check for nan errors and calculate new thetas
if (is.nan(denominator) | denominator == 0){
thetas_new <- c(0, 0, 0, 0)
break
} else{
thetas_new <- numerators/denominator
}
difference <- max(abs(thetas_new - thetas))
iteration <- iteration + 1
# print("iteration")
# print(iteration)
# print("theta old, theta new")
# print(thetas)
# print(thetas_new)
# print("difference")
# print(difference)
}
return(thetas_new)
}
#test
get_new_thetas(bases[[1]][1:10], errors[[1]][1:10])
get_new_thetas <- function(bases_vector, errors_vector){
#set initial frequencies and genotypes and varibales
thetas_new <- c(0.25, 0.25, 0.25, 0.25)
genotypes <- c("A", "C", "G", "T")
difference <- 1
iteration <- 0
#base_prob <- list(A, T, C, G), A = [b1..bN], T = [b1..bN]...
base_probabilities <- lapply(genotypes,
get_base_probability, bases_vector, errors_vector)
#get a list of counts for each base
base_counts <- lapply(as.list(genotypes), get_base_count, bases_vector)
#run EM algo
while (difference > 0.0001 | iteration > 10000){
thetas <- thetas_new
#E Step
#calculate posterior
numerators <- mapply(function(x, y) x*y, base_probabilities, as.list(thetas))
denominator <- apply(numerators, 1, sum)
posterior <- numerators/denominator
print("posterior")
#print(posterior)
#M Step
#calculate posterior*base_count
posterior_sum <- apply(posterior, 2, sum)
denominator <- sum(posterior_sum)
#numerators <- as.data.frame(posterior)
#colnames(numerators) <- genotypes
#numerators <- as.list(numerators)
#numerators <- mapply(function(x, y) x*y, numerators, base_counts)
#numerators <- apply(numerators, 2, sum)
#denominator <- sum(numerators)
# print("numerators2")
# print(numerators)
# print("den")
# print(denominator)
#check for nan errors and calculate new thetas
if (is.nan(denominator) | denominator == 0){
thetas_new <- c(0, 0, 0, 0)
break
} else{
thetas_new <- posterior_sum/denominator
}
difference <- max(abs(thetas_new - thetas))
iteration <- iteration + 1
# print("iteration")
# print(iteration)
# print("theta old, theta new")
# print(thetas)
# print(thetas_new)
# print("difference")
# print(difference)
}
return(thetas_new)
}
#test
get_new_thetas(bases[[1]][1:10], errors[[1]][1:10])
get_new_thetas <- function(bases_vector, errors_vector){
#set initial frequencies and genotypes and varibales
thetas_new <- c(0.25, 0.25, 0.25, 0.25)
genotypes <- c("A", "C", "G", "T")
difference <- 1
iteration <- 0
#base_prob <- list(A, T, C, G), A = [b1..bN], T = [b1..bN]...
base_probabilities <- lapply(genotypes,
get_base_probability, bases_vector, errors_vector)
#get a list of counts for each base
base_counts <- lapply(as.list(genotypes), get_base_count, bases_vector)
#run EM algo
while (difference > 0.0001 | iteration > 10000){
thetas <- thetas_new
#E Step
#calculate posterior
numerators <- mapply(function(x, y) x*y, base_probabilities, as.list(thetas))
denominator <- apply(numerators, 1, sum)
posterior <- numerators/denominator
#print("posterior")
#print(posterior)
#M Step
#calculate posterior*base_count
posterior_sum <- apply(posterior, 2, sum)
denominator <- sum(posterior_sum)
# print("numerators2")
# print(numerators)
# print("den")
# print(denominator)
#check for nan errors and calculate new thetas
if (is.nan(denominator) | denominator == 0){
thetas_new <- c(0, 0, 0, 0)
break
} else{
thetas_new <- posterior_sum/denominator
}
difference <- max(abs(thetas_new - thetas))
iteration <- iteration + 1
# print("iteration")
# print(iteration)
# print("theta old, theta new")
# print(thetas)
# print(thetas_new)
# print("difference")
# print(difference)
}
return(thetas_new)
}
#calculate allele frequencies
allele_freqs <- mapply(get_new_thetas, bases, errors)
head(allele_freqs)
allele_freqs <- t(allele_freqs)
head(allele_freqs)
#find maximum allele frequncies
max_freq <- apply(allele_freqs, 1, max)
#exclude errors and find max allele frequncies less than 0.9
uncertain_sites <- allele_freqs[max_freq < 0.9 & max_freq > 0,]
dim(uncertain_sites)[1]
errors <- allele_freqs[max_freq == 0,]
max_freq
#test
get_new_thetas(bases[[1]], errors[[1]])
dat <- read.delim("MTnice.pileup", as.is=T, comment.char="", head=F, quote="")
names(dat) <- c("CHR","POS","REF", c("depth","bases","Qscore"))
## bases for individual 1 as a list
bases <- strsplit(dat$bases,"")
## ascii qualities for individual 1
asciiQ <- strsplit(dat$Qscore,"") #ascii code
Q <- lapply(asciiQ, function(x) charToInt(x) - 33) # quality score
errors <- lapply(Q, function(x) 10^(-x/10)) # error probability
#delte useless files
rm(dat, asciiQ, Q)
#test
get_new_thetas(bases[[1]], errors[[1]])
#test
get_new_thetas(bases[[2]], errors[[2]])
head(allele_freqs)
get_new_thetas <- function(bases_vector, errors_vector){
#set initial frequencies and genotypes and varibales
thetas_new <- c(0.25, 0.25, 0.25, 0.25)
genotypes <- c("A", "C", "G", "T")
difference <- 1
iteration <- 0
#base_prob <- list(A, T, C, G), A = [b1..bN], T = [b1..bN]...
base_probabilities <- lapply(genotypes,
get_base_probability, bases_vector, errors_vector)
#get a list of counts for each base
#base_counts <- lapply(as.list(genotypes), get_base_count, bases_vector)
#run EM algo
while (difference > 0.0001 | iteration > 10000){
thetas <- thetas_new
#E Step
#calculate posterior
numerators <- mapply(function(x, y) x*y, base_probabilities, as.list(thetas))
denominator <- apply(numerators, 1, sum)
posterior <- numerators/denominator
print("num")
print(numerators)
print("dem")
print(denominator)
#M Step
#calculate sum of posterior
posterior_sum <- apply(posterior, 2, sum)
denominator <- sum(posterior_sum)
#check for nan errors and calculate new thetas
# if (is.nan(denominator) | denominator == 0){
#   thetas_new <- c(0, 0, 0, 0)
#   break
# } else{
#   thetas_new <- posterior_sum/denominator
# }
#calculate new thetas
thetas_new <- posterior_sum/denominator
difference <- max(abs(thetas_new - thetas))
iteration <- iteration + 1
}
return(thetas_new)
}
#test
get_new_thetas(bases[[1]][1:10], errors[[1]][1:10])
#exclude errors and find max allele frequncies less than 0.9
uncertain_sites <- allele_freqs[max_freq < 0.9,]
dim(uncertain_sites)[1]
get_new_thetas(bases[[302]], errors[[302]])
get_new_thetas <- function(bases_vector, errors_vector){
#set initial frequencies and genotypes and varibales
thetas_new <- c(0.25, 0.25, 0.25, 0.25)
genotypes <- c("A", "C", "G", "T")
difference <- 1
iteration <- 0
#base_prob <- list(A, T, C, G), A = [b1..bN], T = [b1..bN]...
base_probabilities <- lapply(genotypes,
get_base_probability, bases_vector, errors_vector)
#get a list of counts for each base
#base_counts <- lapply(as.list(genotypes), get_base_count, bases_vector)
#run EM algo
while (difference > 0.0001 | iteration > 10000){
thetas <- thetas_new
#E Step
#calculate posterior
numerators <- mapply(function(x, y) x*y, base_probabilities, as.list(thetas))
denominator <- apply(numerators, 1, sum)
posterior <- numerators/denominator
print("num")
print(dim(numerators))
print("dem")
print(dim(denominator))
#M Step
#calculate sum of posterior
posterior_sum <- apply(posterior, 2, sum)
denominator <- sum(posterior_sum)
#check for nan errors and calculate new thetas
# if (is.nan(denominator) | denominator == 0){
#   thetas_new <- c(0, 0, 0, 0)
#   break
# } else{
#   thetas_new <- posterior_sum/denominator
# }
#calculate new thetas
thetas_new <- posterior_sum/denominator
difference <- max(abs(thetas_new - thetas))
iteration <- iteration + 1
}
return(thetas_new)
}
get_new_thetas(bases[[302]], errors[[302]])
get_new_thetas <- function(bases_vector, errors_vector){
#set initial frequencies and genotypes and varibales
thetas_new <- c(0.25, 0.25, 0.25, 0.25)
genotypes <- c("A", "C", "G", "T")
difference <- 1
iteration <- 0
#base_prob <- list(A, T, C, G), A = [b1..bN], T = [b1..bN]...
base_probabilities <- lapply(genotypes,
get_base_probability, bases_vector, errors_vector)
#get a list of counts for each base
#base_counts <- lapply(as.list(genotypes), get_base_count, bases_vector)
#run EM algo
while (difference > 0.0001 | iteration > 10000){
thetas <- thetas_new
#E Step
#calculate posterior
numerators <- mapply(function(x, y) x*y, base_probabilities, as.list(thetas))
denominator <- apply(numerators, 1, sum)
posterior <- numerators/denominator
print("num")
print(dim(numerators))
print("dem")
print(length(denominator))
#M Step
#calculate sum of posterior
posterior_sum <- apply(posterior, 2, sum)
denominator <- sum(posterior_sum)
#check for nan errors and calculate new thetas
# if (is.nan(denominator) | denominator == 0){
#   thetas_new <- c(0, 0, 0, 0)
#   break
# } else{
#   thetas_new <- posterior_sum/denominator
# }
#calculate new thetas
thetas_new <- posterior_sum/denominator
difference <- max(abs(thetas_new - thetas))
iteration <- iteration + 1
}
return(thetas_new)
}
get_new_thetas(bases[[302]], errors[[302]])
