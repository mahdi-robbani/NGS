"0","# Learn how to correct for batch effect."
"0","# Learn how to identify differentially expressed genes across batch "
"0","load('inputData.Rdata')"
"0","source(""shared_functions.R"")"
"0","# Section 2: Using Combat to normalize batch effect."
"0","sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'  # For simplity, we treat minor worker in A.echinator as worker caste"
"0","normal_ant = which(sampleTable$species %in% c(""Aech"",'Mpha',""Lhum"",'Sinv',""Lnig"", ""Dqua"",""Cbir""))"
"0","ortholog_exp.ant = ortholog_counts[,normal_ant]"
"0","sampleTable.ant = droplevels(sampleTable[normal_ant,])"
"0","ortholog_exp.ant = ortholog_exp.ant[!apply(ortholog_exp.ant, 1, anyNA),]  #Removed genes showing NA (e.g. without expression)"
"0","ortholog_exp.ant.norm = log2(normalize.quantiles(ortholog_exp.ant)+1)"
"0","colnames(ortholog_exp.ant.norm) = colnames(ortholog_exp.ant)"
"0","rownames(ortholog_exp.ant.norm) = rownames(ortholog_exp.ant)"
"0","ortholog_exp.ant.norm = ortholog_exp.ant.norm[apply(ortholog_exp.ant.norm, 1, "
"0","                                                    FUN = function(x) return(var(x, na.rm = T) > 0)),] "
"0","batch = droplevels(sampleTable.ant$colony) # Normalization for species identity."
"0","modcombat = model.matrix(~1, data = sampleTable.ant)"
"0","combat.ortholog_exp.ant = ComBat(dat=ortholog_exp.ant.norm, batch=batch, mod=modcombat,"
"0","                             mean.only = F, par.prior=TRUE, prior.plots=FALSE)"
"1","Found 318 genes with uniform expression within a single batch (all zeros); these will not be adjusted for batch.
"
"0","sampleDists.combat = as.dist(1 - cor(combat.ortholog_exp.ant,method = 's'))"
"0","pheatmap(sampleDists.combat,annotation_col = sampleTable.ant[,c(1:3)], "
"0","         annotation_colors = ann_colors,"
"0","         color = colors) "
