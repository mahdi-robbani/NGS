library('preprocessCore')
library("preprocessCore")
library('factoextra')
library('tidyverse')
library('phytools')
library('devtools')
library('Biobase')
library('DESeq2')
library('rjson')
library('fastICA')
library('a')
library('ggtree')
install.packages("a")
library('tximport')
library("RColorBrewer")
library("pheatmap")
library('preprocessCore')
library("preprocessCore")
library('factoextra')
library('tidyverse')
library('phytools')
library('devtools')
library('Biobase')
library('DESeq2')
library('rjson')
library('fastICA')
library('a')
library('ggtree')
read_input = function(species_header, col_name, input_dir, data_type = 'abundance'){
quant_files = c(paste(species_header,col_name,sep ='_'))
files <- file.path(input_dir, "input/deg_salmon_gemoma/", species_header,
'quants', quant_files, "quant.sf") # Output of salmon, transcript level quantification
names(files) <- quant_files
tx2gene <- read.csv(paste(input_dir, '/input/deg_salmon_gemoma/', species_header,'/',species_header,
'_gemoma_t2g.txt',sep = ''),header = F, sep = '\t') # Transcript to gene information, for gene level quantification
tx2gene$V1 = toupper(tx2gene$V1)
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene,
countsFromAbundance = 'lengthScaledTPM')
abundance_data = txi.salmon[[data_type]]
rownames(abundance_data)  = paste(species_header,  rownames(abundance_data), sep = '_')
return(abundance_data)
}
colors <- rev(colorRampPalette(brewer.pal(9, "Blues"))(255))
colors_gene <- colorRampPalette(brewer.pal(9, "RdYlBu"))(255)
sp_color = rainbow(7)
ann_colors = list(species = c('Aech' = sp_color[1],'Sinv' = sp_color[2],'Mpha' = sp_color[3],'Lnig' = sp_color[4],'Lhum' = sp_color[5],
'Dqua' = sp_color[6],'Cbir' = sp_color[7]),
caste = c(Gyne = rgb(1,0,0,0.8), Worker = rgb(0,0,1,0.8), Minor_worker = 'green',
Reproductive = 'purple', `Non_reproductive` = 'pink'))
library('tximport')
library("RColorBrewer")
library("pheatmap")
library('preprocessCore')
library("FactoMineR")
library('factoextra')
library('tidyverse')
library('phytools')
library('devtools')
library('Biobase')
library('DESeq2')
library('rjson')
library('fastICA')
library('sva')
library('ggtree')
read_input = function(species_header, col_name, input_dir, data_type = 'abundance'){
quant_files = c(paste(species_header,col_name,sep ='_'))
files <- file.path(input_dir, "input/deg_salmon_gemoma/", species_header,
'quants', quant_files, "quant.sf") # Output of salmon, transcript level quantification
names(files) <- quant_files
tx2gene <- read.csv(paste(input_dir, '/input/deg_salmon_gemoma/', species_header,'/',species_header,
'_gemoma_t2g.txt',sep = ''),header = F, sep = '\t') # Transcript to gene information, for gene level quantification
tx2gene$V1 = toupper(tx2gene$V1)
txi.salmon <- tximport(files, type = "salmon", tx2gene = tx2gene,
countsFromAbundance = 'lengthScaledTPM')
abundance_data = txi.salmon[[data_type]]
rownames(abundance_data)  = paste(species_header,  rownames(abundance_data), sep = '_')
return(abundance_data)
}
colors <- rev(colorRampPalette(brewer.pal(9, "Blues"))(255))
colors_gene <- colorRampPalette(brewer.pal(9, "RdYlBu"))(255)
sp_color = rainbow(7)
ann_colors = list(species = c('Aech' = sp_color[1],'Sinv' = sp_color[2],'Mpha' = sp_color[3],'Lnig' = sp_color[4],'Lhum' = sp_color[5],
'Dqua' = sp_color[6],'Cbir' = sp_color[7]),
caste = c(Gyne = rgb(1,0,0,0.8), Worker = rgb(0,0,1,0.8), Minor_worker = 'green',
Reproductive = 'purple', `Non_reproductive` = 'pink'))
load('inputData.Rdata')
source('shared_functions.R')
# Note 1. ortholog_exp and ortholog_counts are the expression matrix (Transcripts Per Kilobase Million, TPM) and the read count matrix for the 6672 one-to-one orthologous genes across 7 ant species.
# Note 2. sampleTable is the sample information for ortholog_exp, rownames are sample ID.
# Species: Aech, Mpha, Lhum, and Lnig are ants with caste system (life-long reproductive division of labour, queen (reproductive) and worker (sterile)). Dqua and Cbir are queenless ants, they have lost the queen caste and secondarily evolved reproductive worker caste.
# Lab: Samples of these seven ant species were from different labs.
# Note 3. Phylogeny of the seven ant species:
ant_tree = read.newick(text = ant_tree.data)
plot(ant_tree)
table(sampleTable$lab,sampleTable$species)
# Task 1.1: Try different normalization methods with ortholog_exp
ortholog_exp.norm = ortholog_counts #
ortholog_exp.norm = log2(ortholog_counts + 1)
ortholog_exp.norm = log2(normalize.quantiles(ortholog_counts)+1)
#e.g. ortholog_exp.norm = log10(normalize.quantiles(ortholog_exp)+1)
colnames(ortholog_exp.norm) = colnames(ortholog_counts)
rownames(ortholog_exp.norm) = rownames(ortholog_counts)
ortholog_exp.norm = ortholog_exp.norm[!apply(ortholog_exp.norm, 1, anyNA),] #Removed genes showing NA (e.g. without expression)
plot(density(ortholog_exp.norm[,21],na.rm=T),col = sp_color[sampleTable$species[1]],lwd=3, ylim = c(0,.3))
for(i in c(2:62)){
lines(density(ortholog_exp.norm[,i],na.rm=T),col = sp_color[sampleTable$species[i]])}
# Task 1.2: Try different distance measuring methods,
sampleDists = dist(t(ortholog_exp.norm))
sampleDists = as.dist(1 - cor(ortholog_exp.norm, method = 's', use = 'c'))
# A simple way to look at the data
sample_cluster = hclust(sampleDists)
plot(sample_cluster)
# For better visualization, we plot the hclust result in heatmap:
pheatmap(sampleDists,annotation_col = sampleTable[,c(1:3)],
annotation_colors = ann_colors,
# Take a look at the ann_colors in shared_function.R.
color = colors)
# We can further examine the transcriptome patterns among samples using PCA:
n = 10
ortholog_exp.norm.pca <- PCA(t(ortholog_exp.norm),ncp = n, graph = FALSE)
# Take a look at the amount of variations explained by each PC.
fviz_eig(ortholog_exp.norm.pca, addlabels = TRUE,main = 'Explained variance for each PC')
pca.var = ortholog_exp.norm.pca$eig
pca.data = cbind(ortholog_exp.norm.pca$ind$coord[,c(1:n)],sampleTable)
ggplot(pca.data, aes(x = Dim.6, y = Dim.7, color = species, shape = caste)) +
geom_point(size=3) +
coord_fixed()+
theme_bw()
# Learn how to correct for batch effect.
# Learn how to identify differentially expressed genes across batch
load('inputData.Rdata')
source("shared_functions.R")
sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'  # For simplity, we treat minor worker in A.echinator as worker caste
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
sampleTable.ant = droplevels(sampleTable[normal_ant,])
ortholog_exp.ant = ortholog_exp.ant[!apply(ortholog_exp.ant, 1, anyNA),]  #Removed genes showing NA (e.g. without expression)
ortholog_exp.ant.norm = log2(normalize.quantiles(ortholog_exp.ant)+1)
colnames(ortholog_exp.ant.norm) = colnames(ortholog_exp.ant)
rownames(ortholog_exp.ant.norm) = rownames(ortholog_exp.ant)
ortholog_exp.ant.norm = ortholog_exp.ant.norm[apply(ortholog_exp.ant.norm, 1,
FUN = function(x) return(var(x, na.rm = T) > 0)),]
batch = droplevels(sampleTable.ant$colony) # Normalization for species identity.
modcombat = model.matrix(~1, data = sampleTable.ant)
combat.ortholog_exp.ant = ComBat(dat=ortholog_exp.ant.norm, batch=batch, mod=modcombat,
mean.only = F, par.prior=TRUE, prior.plots=FALSE)
sampleDists.combat = as.dist(1 - cor(combat.ortholog_exp.ant,method = 's'))
pheatmap(sampleDists.combat,annotation_col = sampleTable.ant[,c(1:3)],
annotation_colors = ann_colors,
color = colors)
var.gene = order(apply(combat.ortholog_exp.ant,1,var),decreasing = T)[c(1:1000)]
var.gene = order(apply(combat.ortholog_exp.ant,1,var),decreasing = T)[c(1:1000)]
ortholog_exp.combat.pca <- PCA(t(combat.ortholog_exp.ant[var.gene,]),ncp = 4, graph = FALSE)
# Take a look at the amount of variations explained by each PC.
fviz_eig(ortholog_exp.combat.pca, addlabels = TRUE,main = 'Explained variance for each PC')
pca.combat.var = ortholog_exp.combat.pca$eig
pca.combat.data = cbind(ortholog_exp.combat.pca$ind$coord,sampleTable.ant)
ggplot(pca.combat.data, aes(x = Dim.1, y = Dim.2, color = caste, shape = species)) +
geom_point(size=3) +
coord_fixed()+
theme_bw()
# Section 3: Construction of co-expression network:
sample_genes = sample(dim(ortholog_exp.ant.norm)[1], size = 100)
gene_correlation = abs(cor(t(ortholog_exp.ant.norm[sample_genes,]),method = 's')) # gene.dist.a, "raw" data
gene_correlation = abs(cor(t(combat.ortholog_exp.ant[sample_genes,]),method = 's')) # gene.dist.b, data normalized for species identity
gene.dist = as.dist(1-gene_correlation)
pheatmap(gene.dist,show_rownames = F,show_colnames = F,color = colors_gene)
# Plotting top two connected genes (co-expressed) in different normalization methods.
gene_connections = apply(gene_correlation,1,mean)
gene_connections[order(gene_connections,decreasing = T)[c(1:10)]]
top_gene = names(gene_connections[order(gene_connections,decreasing = T)[1]])
gene_correlation[top_gene,order(gene_correlation[top_gene,],decreasing = T)[c(1:10)]]
correlated_gene = names(gene_correlation[top_gene,order(gene_correlation[top_gene,],decreasing = T)])[2]
gene_x = ortholog_exp.ant.norm[top_gene,]
gene_y = ortholog_exp.ant.norm[correlated_gene,]
plot(gene_x,gene_y,col = sampleTable.ant$species, pch = 20)
text(gene_x, gene_y, sampleTable.ant$lab, cex=0.6, pos=4, col="black")
text(gene_x, gene_y, sampleTable.ant$caste, cex=0.6, pos=2, col="black")
# Visualize your network
library(igraph)
gene_correlation.filtered = gene_correlation
ant_tree = read.newick(text = ant_tree.data)
plot(ant_tree)
table(sampleTable$lab,sampleTable$species)
ortholog_counts
# Task 1.1: Try different normalization methods with ortholog_exp
ortholog_exp.norm = ortholog_counts #
ortholog_exp.norm = log2(ortholog_counts + 1)
ortholog_exp.norm = log2(normalize.quantiles(ortholog_counts)+1)
ortholog_exp.norm
colnames(ortholog_exp.norm) = colnames(ortholog_counts)
ortholog_exp.norm
rownames(ortholog_exp.norm) = rownames(ortholog_counts)
ortholog_exp.norm = ortholog_exp.norm[!apply(ortholog_exp.norm, 1, anyNA),] #Removed genes showing NA (e.g. without expression)
ortholog_exp.norm
ortholog_exp.norm %>% tail
plot(density(ortholog_exp.norm[,21],na.rm=T),col = sp_color[sampleTable$species[1]],lwd=3, ylim = c(0,.3))
ortholog_exp.norm
ortholog_exp.norm[,21]
ortholog_exp.norm
for(i in c(2:62)){
lines(density(ortholog_exp.norm[,i],na.rm=T),col = sp_color[sampleTable$species[i]])}
ortholog_exp.norm
# Task 1.2: Try different distance measuring methods,
sampleDists = dist(t(ortholog_exp.norm))
sampleDists = as.dist(1 - cor(ortholog_exp.norm, method = 's', use = 'c'))
sampleDists
sampleDists
ortholog_exp.norm
# A simple way to look at the data
sample_cluster = hclust(sampleDists)
plot(sample_cluster)
# For better visualization, we plot the hclust result in heatmap:
pheatmap(sampleDists,annotation_col = sampleTable[,c(1:3)],
annotation_colors = ann_colors,
# Take a look at the ann_colors in shared_function.R.
color = colors)
ortholog_counts
# Task 1.1: Try different normalization methods with ortholog_exp
colnames(ortholog_counts)
# Task 1.1: Try different normalization methods with ortholog_exp
grep("^....", colnames(ortholog_counts) %>% unique
# Task 1.1: Try different normalization methods with ortholog_exp
grep("^....", colnames(ortholog_counts)) %>% unique
# Task 1.1: Try different normalization methods with ortholog_exp
grep("^....", colnames(ortholog_counts)) %>% unique
grep("^....", colnames(ortholog_counts))
colnames(ortholog_counts)
# Task 1.1: Try different normalization methods with ortholog_exp
grep("^", colnames(ortholog_counts)) %>% unique
# Task 1.1: Try different normalization methods with ortholog_exp
grep("^", colnames(ortholog_counts)) #%>% unique
# Task 1.1: Try different normalization methods with ortholog_exp
grep("^.", colnames(ortholog_counts)) #%>% unique
# Task 1.1: Try different normalization methods with ortholog_exp
grep("[A-z]{4}", colnames(ortholog_counts)) #%>% unique
# Task 1.1: Try different normalization methods with ortholog_exp
grepl("[A-z]{4}", colnames(ortholog_counts)) #%>% unique
# Task 1.1: Try different normalization methods with ortholog_exp
grep("[A-z]{4}", colnames(ortholog_counts), value = T) #%>% unique
# Task 1.1: Try different normalization methods with ortholog_exp
substr("Aech", colnames(ortholog_exp.ant.norm))
colnames(ortholog_exp.ant.norm)
load('inputData.Rdata')
source('shared_functions.R')
# Note 1. ortholog_exp and ortholog_counts are the expression matrix (Transcripts Per Kilobase Million, TPM) and the read count matrix for the 6672 one-to-one orthologous genes across 7 ant species.
# Note 2. sampleTable is the sample information for ortholog_exp, rownames are sample ID.
# Species: Aech, Mpha, Lhum, and Lnig are ants with caste system (life-long reproductive division of labour, queen (reproductive) and worker (sterile)). Dqua and Cbir are queenless ants, they have lost the queen caste and secondarily evolved reproductive worker caste.
# Lab: Samples of these seven ant species were from different labs.
# Note 3. Phylogeny of the seven ant species:
ant_tree = read.newick(text = ant_tree.data)
plot(ant_tree)
ant_tree.data
# Note 1. ortholog_exp and ortholog_counts are the expression matrix (Transcripts Per Kilobase Million, TPM) and the read count matrix for the 6672 one-to-one orthologous genes across 7 ant species.
# Note 2. sampleTable is the sample information for ortholog_exp, rownames are sample ID.
# Species: Aech, Mpha, Lhum, and Lnig are ants with caste system (life-long reproductive division of labour, queen (reproductive) and worker (sterile)). Dqua and Cbir are queenless ants, they have lost the queen caste and secondarily evolved reproductive worker caste.
# Lab: Samples of these seven ant species were from different labs.
# Note 3. Phylogeny of the seven ant species:
ant_tree = read.newick(text = ant_tree.data)
ant_tree
plot(ant_tree)
table(sampleTable$lab,sampleTable$species)
ortholog_counts
# Task 1.1: Try different normalization methods with ortholog_exp
ortholog_exp.norm = ortholog_counts #
ortholog_exp.norm = log2(ortholog_counts + 1)
ortholog_exp.norm = log2(normalize.quantiles(ortholog_counts)+1)
ortholog_counts
ortholog_exp.norm
colnames(ortholog_exp.norm) = colnames(ortholog_counts)
rownames(ortholog_exp.norm) = rownames(ortholog_counts)
ortholog_exp.norm = ortholog_exp.norm[!apply(ortholog_exp.norm, 1, anyNA),] #Removed genes showing NA (e.g. without expression)
ortholog_exp.norm
sampleTable
ortholog_exp.norm
dist(t(ortholog_exp.norm))
# Task 1.2: Try different distance measuring methods,
sampleDists = dist(t(ortholog_exp.norm))
sampleDists = as.dist(1 - cor(ortholog_exp.norm, method = 's', use = 'c'))
# A simple way to look at the data
sample_cluster = hclust(sampleDists)
plot(sample_cluster)
# For better visualization, we plot the hclust result in heatmap:
pheatmap(sampleDists,annotation_col = sampleTable[,c(1:3)],
annotation_colors = ann_colors,
# Take a look at the ann_colors in shared_function.R.
color = colors)
# We can further examine the transcriptome patterns among samples using PCA:
n = 10
ortholog_exp.norm.pca <- PCA(t(ortholog_exp.norm),ncp = n, graph = FALSE)
# Take a look at the amount of variations explained by each PC.
fviz_eig(ortholog_exp.norm.pca, addlabels = TRUE,main = 'Explained variance for each PC')
ortholog_exp.norm.pca
ortholog_exp.norm.pca
ortholog_exp.norm.pca$eig
pca.var = ortholog_exp.norm.pca$eig
ortholog_exp.norm.pca
pca.data = cbind(ortholog_exp.norm.pca$ind$coord[,c(1:n)],sampleTable)
pca.data
ggplot(pca.data, aes(x = Dim.6, y = Dim.7, color = species, shape = caste)) +
geom_point(size=3) +
coord_fixed()+
theme_bw()
load('inputData.Rdata')
source("shared_functions.R")
# Section 2: Using Combat to normalize batch effect.
sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'  # For simplity, we treat minor worker in A.echinator as worker caste
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
sampleTable.ant = droplevels(sampleTable[normal_ant,])
ortholog_exp.ant = ortholog_exp.ant[!apply(ortholog_exp.ant, 1, anyNA),]  #Removed genes showing NA (e.g. without expression)
ortholog_exp.ant.norm = log2(normalize.quantiles(ortholog_exp.ant)+1)
colnames(ortholog_exp.ant.norm) = colnames(ortholog_exp.ant)
rownames(ortholog_exp.ant.norm) = rownames(ortholog_exp.ant)
ortholog_exp.ant.norm = ortholog_exp.ant.norm[apply(ortholog_exp.ant.norm, 1,
FUN = function(x) return(var(x, na.rm = T) > 0)),]
batch = droplevels(sampleTable.ant$colony) # Normalization for species identity.
modcombat = model.matrix(~1, data = sampleTable.ant)
combat.ortholog_exp.ant = ComBat(dat=ortholog_exp.ant.norm, batch=batch, mod=modcombat,
mean.only = F, par.prior=TRUE, prior.plots=FALSE)
sampleDists.combat = as.dist(1 - cor(combat.ortholog_exp.ant,method = 's'))
pheatmap(sampleDists.combat,annotation_col = sampleTable.ant[,c(1:3)],
annotation_colors = ann_colors,
color = colors)
var.gene = order(apply(combat.ortholog_exp.ant,1,var),decreasing = T)[c(1:1000)]
ortholog_exp.combat.pca <- PCA(t(combat.ortholog_exp.ant[var.gene,]),ncp = 4, graph = FALSE)
# Take a look at the amount of variations explained by each PC.
fviz_eig(ortholog_exp.combat.pca, addlabels = TRUE,main = 'Explained variance for each PC')
pca.combat.var = ortholog_exp.combat.pca$eig
pca.combat.data = cbind(ortholog_exp.combat.pca$ind$coord,sampleTable.ant)
ggplot(pca.combat.data, aes(x = Dim.1, y = Dim.2, color = caste, shape = species)) +
geom_point(size=3) +
coord_fixed()+
theme_bw()
# Take a look at the amount of variations explained by each PC.
fviz_eig(ortholog_exp.combat.pca, addlabels = TRUE,main = 'Explained variance for each PC')
pheatmap(gene.dist,show_rownames = F,show_colnames = F,color = colors_gene)
# Learn how to correct for batch effect.
# Learn how to identify differentially expressed genes across batch
load('inputData.Rdata')
source("shared_functions.R")
# Section 2: Using Combat to normalize batch effect.
sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'  # For simplity, we treat minor worker in A.echinator as worker caste
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
sampleTable.ant = droplevels(sampleTable[normal_ant,])
ortholog_exp.ant = ortholog_exp.ant[!apply(ortholog_exp.ant, 1, anyNA),]  #Removed genes showing NA (e.g. without expression)
ortholog_exp.ant.norm = log2(normalize.quantiles(ortholog_exp.ant)+1)
colnames(ortholog_exp.ant.norm) = colnames(ortholog_exp.ant)
rownames(ortholog_exp.ant.norm) = rownames(ortholog_exp.ant)
ortholog_exp.ant.norm = ortholog_exp.ant.norm[apply(ortholog_exp.ant.norm, 1,
FUN = function(x) return(var(x, na.rm = T) > 0)),]
batch = droplevels(sampleTable.ant$colony) # Normalization for species identity.
modcombat = model.matrix(~1, data = sampleTable.ant)
combat.ortholog_exp.ant = ComBat(dat=ortholog_exp.ant.norm, batch=batch, mod=modcombat,
mean.only = F, par.prior=TRUE, prior.plots=FALSE)
sampleDists.combat = as.dist(1 - cor(combat.ortholog_exp.ant,method = 's'))
pheatmap(sampleDists.combat,annotation_col = sampleTable.ant[,c(1:3)],
annotation_colors = ann_colors,
color = colors)
var.gene = order(apply(combat.ortholog_exp.ant,1,var),decreasing = T)[c(1:1000)]
ortholog_exp.combat.pca <- PCA(t(combat.ortholog_exp.ant[var.gene,]),ncp = 4, graph = FALSE)
# Take a look at the amount of variations explained by each PC.
fviz_eig(ortholog_exp.combat.pca, addlabels = TRUE,main = 'Explained variance for each PC')
pca.combat.var = ortholog_exp.combat.pca$eig
pca.combat.data = cbind(ortholog_exp.combat.pca$ind$coord,sampleTable.ant)
ggplot(pca.combat.data, aes(x = Dim.1, y = Dim.2, color = caste, shape = species)) +
geom_point(size=3) +
coord_fixed()+
theme_bw()
# Questions:
# What is the dominant factor for PC 1?
# Does species identity play role in gene expression after normalization? How to explain?
# Section 3: Construction of co-expression network:
sample_genes = sample(dim(ortholog_exp.ant.norm)[1], size = 100)
gene_correlation = abs(cor(t(ortholog_exp.ant.norm[sample_genes,]),method = 's')) # gene.dist.a, "raw" data
gene_correlation = abs(cor(t(combat.ortholog_exp.ant[sample_genes,]),method = 's')) # gene.dist.b, data normalized for species identity
gene.dist = as.dist(1-gene_correlation)
pheatmap(gene.dist,show_rownames = F,show_colnames = F,color = colors_gene)
sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'  # For simplity, we treat minor worker in A.echinator as worker caste
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
sampleTable.ant = droplevels(sampleTable[normal_ant,])
ortholog_exp.ant = ortholog_exp.ant[!apply(ortholog_exp.ant, 1, anyNA),]  #Removed genes showing NA (e.g. without expression)
ortholog_exp.ant.norm = log2(normalize.quantiles(ortholog_exp.ant)+1)
colnames(ortholog_exp.ant.norm) = colnames(ortholog_exp.ant)
rownames(ortholog_exp.ant.norm) = rownames(ortholog_exp.ant)
ortholog_exp.ant.norm = ortholog_exp.ant.norm[apply(ortholog_exp.ant.norm, 1,
FUN = function(x) return(var(x, na.rm = T) > 0)),]
batch = droplevels(sampleTable.ant$colony) # Normalization for species identity.
modcombat = model.matrix(~1, data = sampleTable.ant)
combat.ortholog_exp.ant = ComBat(dat=ortholog_exp.ant.norm, batch=batch, mod=modcombat,
mean.only = F, par.prior=TRUE, prior.plots=FALSE)
sampleDists.combat = as.dist(1 - cor(combat.ortholog_exp.ant,method = 's'))
pheatmap(sampleDists.combat,annotation_col = sampleTable.ant[,c(1:3)],
annotation_colors = ann_colors,
color = colors)
sampleDists.combat
knitr::opts_chunk$set(echo = TRUE)
sampleTable$species
load('inputData.Rdata')
source("shared_functions.R")
# Section 2: Using Combat to normalize batch effect.
sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'  # For simplity, we treat minor worker in A.echinator as worker caste
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig","Dqua", "Cbir"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
sampleTable.ant = droplevels(sampleTable[normal_ant,])
ortholog_exp.ant = ortholog_exp.ant[!apply(ortholog_exp.ant, 1, anyNA),]  #Removed genes showing NA (e.g. without expression)
ortholog_exp.ant.norm = log2(normalize.quantiles(ortholog_exp.ant)+1)
colnames(ortholog_exp.ant.norm) = colnames(ortholog_exp.ant)
rownames(ortholog_exp.ant.norm) = rownames(ortholog_exp.ant)
ortholog_exp.ant.norm = ortholog_exp.ant.norm[apply(ortholog_exp.ant.norm, 1,
FUN = function(x) return(var(x, na.rm = T) > 0)),]
batch = droplevels(sampleTable.ant$colony) # Normalization for species identity.
modcombat = model.matrix(~1, data = sampleTable.ant)
combat.ortholog_exp.ant = ComBat(dat=ortholog_exp.ant.norm, batch=batch, mod=modcombat,
mean.only = F, par.prior=TRUE, prior.plots=FALSE)
sampleDists.combat = as.dist(1 - cor(combat.ortholog_exp.ant,method = 's'))
pheatmap(sampleDists.combat,annotation_col = sampleTable.ant[,c(1:3)],
annotation_colors = ann_colors,
color = colors)
var.gene = order(apply(combat.ortholog_exp.ant,1,var),decreasing = T)[c(1:1000)]
ortholog_exp.combat.pca <- PCA(t(combat.ortholog_exp.ant[var.gene,]),ncp = 4, graph = FALSE)
sampleTable
sampleTable
sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'
normal_ant
ortholog_exp.ant
ortholog_exp.ant
ortholog_exp.ant.norm
sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'  # For simplity, we treat minor worker in A.echinator as worker caste
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
sampleTable.ant = droplevels(sampleTable[normal_ant,])
ortholog_exp.ant = ortholog_exp.ant[!apply(ortholog_exp.ant, 1, anyNA),]  #Removed genes showing NA (e.g. without expression)
ortholog_exp.ant.norm = log2(normalize.quantiles(ortholog_exp.ant)+1)
colnames(ortholog_exp.ant.norm) = colnames(ortholog_exp.ant)
rownames(ortholog_exp.ant.norm) = rownames(ortholog_exp.ant)
ortholog_exp.ant.norm = ortholog_exp.ant.norm[apply(ortholog_exp.ant.norm, 1,
FUN = function(x) return(var(x, na.rm = T) > 0)),]
modcombat
knitr::opts_chunk$set(echo = TRUE)
read_table("cafe_out_q1_r1/Base_branch_probabilities.tab")
x <- read_table("cafe_out_q1_r1/Base_branch_probabilities.tab")
x
x <- read_table("cafe_out_q1_r1/Base_change.tab)
x
x <- read.table("cafe_out_q1_r1/Base_change.tab)
x <- read.table("cafe_out_q1_r1/Base_change.tab")
x
x
x <- read.table("cafe_out_q1_r1/Base_change.tab")
x
read.table("cafe_out_q1_r1/Base_change.tab")
read.table("cafe_out_q1_r1/Base_change.tab")
read.table("cafe_out_q1_r1/Base_change.tab") %>% t
read.table("cafe_out_q1_r1/Base_change.tab") %>% t
read.table("cafe_out_q1_r1/Base_branch_probabilities.tab") %>% t
read.table("cafe_out_q1_r1/Base_branch_probabilities.tab")
read.table("cafe_out_q1_r1/Base_branch_probabilities.tab") %>% t
x <- read.table("cafe_out_q1_r1/Base_branch_probabilities.tab") %>% t
x %>% as_tibble()
x %>% as_tibble() %>% filter(V2 <= 0.05)
knitr::opts_chunk$set(echo = TRUE)
(FauNEOPT:0.1017632793,(((((((((((((((LfoCHILO:0.0517900947,SpoCHILO:0.0596696512)100:0.0138623296,ScolCHILO:0.0643209688)92:0.0077607125,Ctas2CHILO:0.0671410943)100:0.0221772753,(((NamDIPLO:0.0614186509,AmaDIPLO:0.0571159717)100:0.0127720194,Pge2DIPLO:0.0720672424)100:0.0156120351,Pol2DIPLO:0.0933238822)100:0.0112866217)98:0.0082966167,((Han2SYMPH:0.0628417954,Scu3SYMPH:0.0498808881)100:0.0400156882,EuryPAURO:0.1280457762)99:0.0108188775)100:0.0124627412,((((LpoXIPHOS:0.0099220636,Cro2XIPHOS:0.0105538516)100:0.0705069978,((((((MgaARACH:0.0429801360,StpARACH:0.0557521371)100:0.0138186359,Pma2ARACH:0.0443903755)100:0.0107176192,AchARACH:0.0735871521)99:0.0091173737,(HariARACH:0.0200065872,HspARACH:0.0194725998)100:0.0568444314)100:0.0126329089,(LnigARACH:0.0931431589,EgigARACH:0.0598060329)86:0.0128430064)24:0.0051035126,(Crp2ARACH:0.0673214497,PwhARACH:0.1054517942)52:0.0102356618)42:0.0066550510)76:0.0087779327,((Amb2ARACH:0.0851098833,IpumARACH:0.1121020037)97:0.0124247404,Din2ARACH:0.1517437953)57:0.0053674835)100:0.0247012198,(((ThulTARD:0.1086335328,MtdTARD:0.1102446998)100:0.1503201028,((Pno2ONYCH:0.0199373605,ErwONYCH:0.0070683567)100:0.0311263641,PepONYCH:0.0355392950)100:0.0632936457)99:0.0194084967,((((TorPYCNO:0.0488956154,AeliPYCNO:0.0334375263)99:0.0104753534,AhiPYCNO:0.0354756204)100:0.0087792370,ElePYCNO:0.0541370416)99:0.0130171390,Col2PYCNO:0.0550477195)100:0.0779125346)87:0.0098540820)99:0.0102691410)100:0.0338865973,((OstOST:0.1426718843,DtyMYSTACO:0.1377234439)96:0.0133174945,((Arg2BIURA:0.0924049946,AarPENTA:0.1538746813)100:0.0429816588,(HapaOST:0.0718568405,SkleOST:0.0506489763)100:0.0693764858)98:0.0117189861)99:0.0130682271)94:0.0074031375,((((MesoCOPE:0.0228513467,A369COPE:0.0370151881)100:0.0652130667,EafCOPE:0.1255172451)100:0.0600130504,((NheMALA:0.0826626943,((LemMALA:0.0569383639,Avu3MALA:0.0944074514)91:0.0111517920,NeoMALA:0.0682388504)100:0.0160880251)100:0.0649714011,(((BbaTHECOS:0.0239891689,CfrTHECOS:0.0241001970)100:0.0088464847,LeanTHECOS:0.0400847585)100:0.0256921046,LoxTHECOS:0.1082752325)100:0.0727106910)88:0.0100494010)100:0.0104822341,((TloBRANCH:0.0934786854,((DmaBRANCH:0.0680857763,Lle2BRANCH:0.0454941927)100:0.0177979471,LynBRANCH:0.0796887701)100:0.0156469865)100:0.0171245849,(Asa3BRANCH:0.0563148333,ufsBRANCH:0.0332261127)100:0.0925606848)100:0.0213016253)92:0.0090380108)99:0.0070401621,(StuREMI:0.0781495002,HmaCEPHAL:0.1054191311)98:0.0125925753)99:0.0080550921,((PaqCOLL:0.0959893110,(OimCOLL:0.0722535122,Tom2COLL:0.0580055369)100:0.0207694641)100:0.0733868717,(JapDIPLUR:0.0713198271,EfrDIPLUR:0.1062999147)100:0.0158242648)94:0.0073012445)100:0.0154370626,(PsaARCHEO:0.0125509637,MbaARCHEO:0.0109494277)100:0.0660343280)93:0.0091810400,(CliZYGEN:0.0487300847,NmeZYGEN:0.0456022167)100:0.0213496477)99:0.0054349021,(MayEPHEM:0.0363786057,EinEPHEM:0.0413094183)100:0.0551843045)88:0.0048652120,(IveODONAT:0.0394258749,LlyODONAT:0.0323607093)100:0.0564866731)99:0.0060189987,((ApaukNEOPT:0.0405135834,CpoNEOPT:0.0289857526)100:0.0258927184,PquNEOPT:0.0368994209)100:0.0997021377)100:0.0103219864,(PamNEOPT:0.0364628431,AdoNEOPT:0.0599355859)100:0.0111761621);
install.packages("formatR")
load('inputData.Rdata')
source("shared_functions.R")
# Section 2: Using Combat to normalize batch effect.
sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'  # For simplity, we treat minor worker in A.echinator as worker caste
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig","Dqua", "Cbir"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
sampleTable.ant = droplevels(sampleTable[normal_ant,])
ortholog_exp.ant = ortholog_exp.ant[!apply(ortholog_exp.ant, 1, anyNA),]  #Removed genes showing NA (e.g. without expression)
ortholog_exp.ant.norm = log2(normalize.quantiles(ortholog_exp.ant)+1)
colnames(ortholog_exp.ant.norm) = colnames(ortholog_exp.ant)
rownames(ortholog_exp.ant.norm) = rownames(ortholog_exp.ant)
ortholog_exp.ant.norm = ortholog_exp.ant.norm[apply(ortholog_exp.ant.norm, 1,
FUN = function(x) return(var(x, na.rm = T) > 0)),]
batch = droplevels(sampleTable.ant$colony) # Normalization for species identity.
modcombat = model.matrix(~1, data = sampleTable.ant)
combat.ortholog_exp.ant = ComBat(dat=ortholog_exp.ant.norm, batch=batch, mod=modcombat,
mean.only = F, par.prior=TRUE, prior.plots=FALSE)
sampleDists.combat = as.dist(1 - cor(combat.ortholog_exp.ant,method = 's'))
pheatmap(sampleDists.combat,annotation_col = sampleTable.ant[,c(1:3)],
annotation_colors = ann_colors,
color = colors)
var.gene = order(apply(combat.ortholog_exp.ant,1,var),decreasing = T)[c(1:1000)]
ortholog_exp.combat.pca <- PCA(t(combat.ortholog_exp.ant[var.gene,]),ncp = 4, graph = FALSE)
load('inputData.Rdata')
source("shared_functions.R")
# Section 2: Using Combat to normalize batch effect.
sampleTable$caste[which(sampleTable$caste == 'Minor_worker')] = 'Worker'  # For simplity, we treat minor worker in A.echinator as worker caste
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig","Dqua", "Cbir"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
sampleTable.ant = droplevels(sampleTable[normal_ant,])
ortholog_exp.ant = ortholog_exp.ant[!apply(ortholog_exp.ant, 1, anyNA),]  #Removed genes showing NA (e.g. without expression)
ortholog_exp.ant.norm = log2(normalize.quantiles(ortholog_exp.ant)+1)
colnames(ortholog_exp.ant.norm) = colnames(ortholog_exp.ant)
rownames(ortholog_exp.ant.norm) = rownames(ortholog_exp.ant)
ortholog_exp.ant.norm = ortholog_exp.ant.norm[apply(ortholog_exp.ant.norm, 1, FUN = function(x) return(var(x, na.rm = T) > 0)),]
batch = droplevels(sampleTable.ant$colony) # Normalization for species identity.
modcombat = model.matrix(~1, data = sampleTable.ant)
combat.ortholog_exp.ant = ComBat(dat=ortholog_exp.ant.norm, batch=batch, mod=modcombat, mean.only = F, par.prior=TRUE, prior.plots=FALSE)
sampleDists.combat = as.dist(1 - cor(combat.ortholog_exp.ant,method = 's'))
pheatmap(sampleDists.combat,annotation_col = sampleTable.ant[,c(1:3)], annotation_colors = ann_colors, color = colors)
var.gene = order(apply(combat.ortholog_exp.ant,1,var),decreasing = T)[c(1:1000)]
ortholog_exp.combat.pca <- PCA(t(combat.ortholog_exp.ant[var.gene,]),ncp = 4, graph = FALSE)
knitr::opts_chunk$set(echo = TRUE)
load("inputData.Rdata")
source("shared_functions.r")
sampleTable$species
