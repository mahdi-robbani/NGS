model_2 %>%
as.data.frame() %>%
head
model_2 %>%
as.data.frame() %>%
filter(padj < 0.05)
model_2 %>%
as.data.frame() %>%
filter(padj < 0.05) %>%
dim
gene_count %>% as.data.frame() %>% t
# Section 4: Identification of caste differentially expressed genes
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts.ant[!apply(ortholog_counts.ant, 1, anyNA),]
ortholog_counts.ant.norm = matrix(as.integer(ortholog_counts.ant), ncol = dim(ortholog_counts.ant)[2],
dimnames = list(rownames(ortholog_counts.ant),colnames(ortholog_counts.ant)))
get_dif_exp_genes <- function(target_species, model=1){
if(model == 1){
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste)
} else{
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste +species+caste:species)
}
dds = DESeq(dds)
res.aech = results(dds, contrast = c("caste",c("Gyne",'Worker')),alpha = 0.05)
return(res.aech)
}
ants_names <- c("Mpha", "Aech", "Lhum", "Lnig", "Sinv")
dseq_results <- list()
filtered_genes <- list()
for(name in ants_names){
dseq_results[[name]] <- get_dif_exp_genes(name)
filtered_genes[[name]] <- dseq_results[[name]] %>%
as.data.frame %>%
rownames_to_column("Gene") %>%
filter(padj < 0.05) %>%
select(Gene)
}
combinations <- list()
gene_count <- list()
for(i in 1:5){
combinations[[i]] <- combn(ants_names, i) # list of species names combinations
columns <- dim(combinations[[i]])[2]
for(c in 1:columns){
species <- combinations[[i]][,c] #vector of species names
group <- paste0(species, collapse = "-")
gene_list <- list() #list of vectors of gene names
for(s in species){
gene_list[[s]] <- filtered_genes[[s]]$Gene
}
gene_count[[group]] <- length(Reduce(intersect, gene_list))
}
}
gene_count %>% as.data.frame() %>% t
model_2 <- get_dif_exp_genes(c("Mpha", "Aech", "Lhum", "Lnig", "Sinv"), 2)
model_2 %>%
as.data.frame() %>%
filter(padj < 0.05) %>%
dim
get_overlapping_genecount <- function(model_type){
ants_names <- c("Mpha", "Aech", "Lhum", "Lnig", "Sinv")
dseq_results <- list()
filtered_genes <- list()
for(name in ants_names){
dseq_results[[name]] <- get_dif_exp_genes(name, model_type)
filtered_genes[[name]] <- dseq_results[[name]] %>%
as.data.frame %>%
rownames_to_column("Gene") %>%
filter(padj < 0.05) %>%
select(Gene)
}
combinations <- list()
gene_count <- list()
for(i in model_type:5){
combinations[[i]] <- combn(ants_names, i) # list of species names combinations
columns <- dim(combinations[[i]])[2]
for(c in 1:columns){
species <- combinations[[i]][,c] #vector of species names
group <- paste0(species, collapse = "-")
gene_list <- list() #list of vectors of gene names
for(s in species){
gene_list[[s]] <- filtered_genes[[s]]$Gene
}
gene_count[[group]] <- length(Reduce(intersect, gene_list))
}
}
gene_count_df <- gene_count %>% as.data.frame() %>% t
colnames(gene_count_df) <- paste0("Model", model_type)
return(gene_count_df)
}
model_1 <- get_overlapping_genecount(1)
gene_count %>% as.data.frame() %>% t %>% rownames_to_column()
gene_count %>% as.data.frame() %>% t %>% rownames_to_column()
gene_count %>% as.data.frame() %>% t %>%
gene_count %>% as.data.frame() %>% t
gene_count
gene_count %>% as.data.frame() %>% t
gene_count %>% as.data.frame() %>% t %>% rownames_to_column()
gene_count %>% as.data.frame() %>% t %>%
gene_count %>% as.data.frame() %>% t
gene_count %>% as.data.frame() %>% t
gene_count %>%
gene_count %>%
head
gene_count %>%
head
gene_count %>% as.data.frame() %>% t %>% as.data.frame()
gene_count %>% as.data.frame() %>% t %>% as.data.frame() %>% rownames_to_column()
x <- gene_count %>% as.data.frame() %>% t %>% as.data.frame() %>% rownames_to_column()
x$rowname
str_count(x$rowname, ".")
str_count(x$rowname, "\.")
str_count(x$rowname, "[.]")
gene_count %>% as.data.frame() %>% t
model_1 <- gene_count %>% as.data.frame() %>% t %>% as.data.frame()
model_1$V2 <- str_count(rownames(model_1), "[.]")
model_1
model_1 <- gene_count %>% as.data.frame() %>% t %>% as.data.frame()
model_1$V2 <- str_count(rownames(model_1), "[.]") + 1
model_1
# Section 4: Identification of caste differentially expressed genes
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts.ant[!apply(ortholog_counts.ant, 1, anyNA),]
ortholog_counts.ant.norm = matrix(as.integer(ortholog_counts.ant), ncol = dim(ortholog_counts.ant)[2],
dimnames = list(rownames(ortholog_counts.ant),colnames(ortholog_counts.ant)))
get_dif_exp_genes <- function(target_species, model=1){
if(model == 1){
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste)
} else{
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste +species+caste:species)
}
dds = DESeq(dds)
res.aech = results(dds, contrast = c("caste",c("Gyne",'Worker')),alpha = 0.05)
return(res.aech)
}
ants_names <- c("Mpha", "Aech", "Lhum", "Lnig", "Sinv")
dseq_results <- list()
filtered_genes <- list()
for(name in ants_names){
dseq_results[[name]] <- get_dif_exp_genes(name)
filtered_genes[[name]] <- dseq_results[[name]] %>%
as.data.frame %>%
rownames_to_column("Gene") %>%
filter(padj < 0.05) %>%
select(Gene)
}
combinations <- list()
gene_count <- list()
for(i in 1:5){
combinations[[i]] <- combn(ants_names, i) # list of species names combinations
columns <- dim(combinations[[i]])[2]
for(c in 1:columns){
species <- combinations[[i]][,c] #vector of species names
group <- paste0(species, collapse = "-")
gene_list <- list() #list of vectors of gene names
for(s in species){
gene_list[[s]] <- filtered_genes[[s]]$Gene
}
gene_count[[group]] <- length(Reduce(intersect, gene_list))
}
}
model_1 <- gene_count %>% as.data.frame() %>% t %>% as.data.frame()
model_1$V2 <- str_count(rownames(model_1), "[.]") + 1
model_1 %>%
filter(V2 > 1) %>%
ggplot(aes(x=V2, y=V1)) + geom_boxplot()
model_2 <- get_dif_exp_genes(c("Mpha", "Aech", "Lhum", "Lnig", "Sinv"), 2)
model_2 %>%
as.data.frame() %>%
filter(padj < 0.05) %>%
dim
# Section 4: Identification of caste differentially expressed genes
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts.ant[!apply(ortholog_counts.ant, 1, anyNA),]
ortholog_counts.ant.norm = matrix(as.integer(ortholog_counts.ant), ncol = dim(ortholog_counts.ant)[2],
dimnames = list(rownames(ortholog_counts.ant),colnames(ortholog_counts.ant)))
get_dif_exp_genes <- function(target_species, model=1){
if(model == 1){
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste)
} else{
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste +species+caste:species)
}
dds = DESeq(dds)
res.aech = results(dds, contrast = c("caste",c("Gyne",'Worker')),alpha = 0.05)
return(res.aech)
}
ants_names <- c("Mpha", "Aech", "Lhum", "Lnig", "Sinv")
dseq_results <- list()
filtered_genes <- list()
for(name in ants_names){
dseq_results[[name]] <- get_dif_exp_genes(name)
filtered_genes[[name]] <- dseq_results[[name]] %>%
as.data.frame %>%
rownames_to_column("Gene") %>%
filter(padj < 0.05) %>%
select(Gene)
}
combinations <- list()
gene_count <- list()
for(i in 1:5){
combinations[[i]] <- combn(ants_names, i) # list of species names combinations
columns <- dim(combinations[[i]])[2]
for(c in 1:columns){
species <- combinations[[i]][,c] #vector of species names
group <- paste0(species, collapse = "-")
gene_list <- list() #list of vectors of gene names
for(s in species){
gene_list[[s]] <- filtered_genes[[s]]$Gene
}
gene_count[[group]] <- length(Reduce(intersect, gene_list))
}
}
model_1 <- gene_count %>% as.data.frame() %>% t %>% as.data.frame()
model_1$V2 <- as.factor(str_count(rownames(model_1), "[.]") + 1)
model_1 %>%
filter(V2 > 1) %>%
ggplot(aes(x=V2, y=V1)) + geom_boxplot()
model_2 <- get_dif_exp_genes(c("Mpha", "Aech", "Lhum", "Lnig", "Sinv"), 2)
model_2 %>%
as.data.frame() %>%
filter(padj < 0.05) %>%
dim
model_1
# Section 4: Identification of caste differentially expressed genes
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts.ant[!apply(ortholog_counts.ant, 1, anyNA),]
ortholog_counts.ant.norm = matrix(as.integer(ortholog_counts.ant), ncol = dim(ortholog_counts.ant)[2],
dimnames = list(rownames(ortholog_counts.ant),colnames(ortholog_counts.ant)))
get_dif_exp_genes <- function(target_species, model=1){
if(model == 1){
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste)
} else{
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste +species+caste:species)
}
dds = DESeq(dds)
res.aech = results(dds, contrast = c("caste",c("Gyne",'Worker')),alpha = 0.05)
return(res.aech)
}
ants_names <- c("Mpha", "Aech", "Lhum", "Lnig", "Sinv")
dseq_results <- list()
filtered_genes <- list()
for(name in ants_names){
dseq_results[[name]] <- get_dif_exp_genes(name)
filtered_genes[[name]] <- dseq_results[[name]] %>%
as.data.frame %>%
rownames_to_column("Gene") %>%
filter(padj < 0.05) %>%
select(Gene)
}
combinations <- list()
gene_count <- list()
for(i in 1:5){
combinations[[i]] <- combn(ants_names, i) # list of species names combinations
columns <- dim(combinations[[i]])[2]
for(c in 1:columns){
species <- combinations[[i]][,c] #vector of species names
group <- paste0(species, collapse = "-")
gene_list <- list() #list of vectors of gene names
for(s in species){
gene_list[[s]] <- filtered_genes[[s]]$Gene
}
gene_count[[group]] <- length(Reduce(intersect, gene_list))
}
}
model_1 <- gene_count %>% as.data.frame() %>% t %>% as.data.frame()
model_1$V2 <- as.factor(str_count(rownames(model_1), "[.]") + 1)
model_1 %>%
ggplot(aes(x=V2, y=V1)) + geom_boxplot()
model_2 <- get_dif_exp_genes(c("Mpha", "Aech", "Lhum", "Lnig", "Sinv"), 2)
model_2 %>%
as.data.frame() %>%
filter(padj < 0.05) %>%
dim
# Section 4: Identification of caste differentially expressed genes
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts.ant[!apply(ortholog_counts.ant, 1, anyNA),]
ortholog_counts.ant.norm = matrix(as.integer(ortholog_counts.ant), ncol = dim(ortholog_counts.ant)[2],
dimnames = list(rownames(ortholog_counts.ant),colnames(ortholog_counts.ant)))
get_dif_exp_genes <- function(target_species, model=1){
if(model == 1){
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste)
} else{
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste +species+caste:species)
}
dds = DESeq(dds)
res.aech = results(dds, contrast = c("caste",c("Gyne",'Worker')),alpha = 0.05)
return(res.aech)
}
ants_names <- c("Mpha", "Aech", "Lhum", "Lnig", "Sinv")
dseq_results <- list()
filtered_genes <- list()
for(name in ants_names){
dseq_results[[name]] <- get_dif_exp_genes(name)
filtered_genes[[name]] <- dseq_results[[name]] %>%
as.data.frame %>%
rownames_to_column("Gene") %>%
filter(padj < 0.05) %>%
select(Gene)
}
combinations <- list()
gene_count <- list()
for(i in 1:5){
combinations[[i]] <- combn(ants_names, i) # list of species names combinations
columns <- dim(combinations[[i]])[2]
for(c in 1:columns){
species <- combinations[[i]][,c] #vector of species names
group <- paste0(species, collapse = "-")
gene_list <- list() #list of vectors of gene names
for(s in species){
gene_list[[s]] <- filtered_genes[[s]]$Gene
}
gene_count[[group]] <- length(Reduce(intersect, gene_list))
}
}
model_1 <- gene_count %>% as.data.frame() %>% t %>% as.data.frame()
model_1$V2 <- as.factor(str_count(rownames(model_1), "[.]") + 1)
model_1 %>%
ggplot(aes(x=V2, y=V1)) + geom_boxplot()
model_2 <- get_dif_exp_genes(c("Mpha", "Aech", "Lhum", "Lnig", "Sinv"), 2)
# Section 4: Identification of caste differentially expressed genes
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts.ant[!apply(ortholog_counts.ant, 1, anyNA),]
ortholog_counts.ant.norm = matrix(as.integer(ortholog_counts.ant), ncol = dim(ortholog_counts.ant)[2],
dimnames = list(rownames(ortholog_counts.ant),colnames(ortholog_counts.ant)))
get_dif_exp_genes <- function(target_species, model=1){
if(model == 1){
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste)
} else{
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste +species+caste:species)
}
dds = DESeq(dds)
res.aech = results(dds, contrast = c("caste",c("Gyne",'Worker')),alpha = 0.05)
return(res.aech)
}
ants_names <- c("Mpha", "Aech", "Lhum", "Lnig", "Sinv")
dseq_results <- list()
filtered_genes <- list()
for(name in ants_names){
dseq_results[[name]] <- get_dif_exp_genes(name)
filtered_genes[[name]] <- dseq_results[[name]] %>%
as.data.frame %>%
rownames_to_column("Gene") %>%
filter(padj < 0.05) %>%
select(Gene)
}
combinations <- list()
gene_count <- list()
for(i in 1:5){
combinations[[i]] <- combn(ants_names, i) # list of species names combinations
columns <- dim(combinations[[i]])[2]
for(c in 1:columns){
species <- combinations[[i]][,c] #vector of species names
group <- paste0(species, collapse = "-")
gene_list <- list() #list of vectors of gene names
for(s in species){
gene_list[[s]] <- filtered_genes[[s]]$Gene
}
gene_count[[group]] <- length(Reduce(intersect, gene_list))
}
}
model_1 <- gene_count %>% as.data.frame() %>% t %>% as.data.frame()
model_1$V2 <- as.factor(str_count(rownames(model_1), "[.]") + 1)
model_1 %>%
ggplot(aes(x=V2, y=V1)) + geom_boxplot()
model_2 <- get_dif_exp_genes(c("Mpha", "Aech", "Lhum", "Lnig", "Sinv"), 2)
print(paste("DEGs in Model 1:", model_1 %>% filter(V2 == 5)))
print(paste("DEGs in Model 2:", model_2 %>% as.data.frame() %>% filter(padj < 0.05) %>% dim[1]))
# Section 4: Identification of caste differentially expressed genes
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts.ant[!apply(ortholog_counts.ant, 1, anyNA),]
ortholog_counts.ant.norm = matrix(as.integer(ortholog_counts.ant), ncol = dim(ortholog_counts.ant)[2],
dimnames = list(rownames(ortholog_counts.ant),colnames(ortholog_counts.ant)))
get_dif_exp_genes <- function(target_species, model=1){
if(model == 1){
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste)
} else{
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste +species+caste:species)
}
dds = DESeq(dds)
res.aech = results(dds, contrast = c("caste",c("Gyne",'Worker')),alpha = 0.05)
return(res.aech)
}
ants_names <- c("Mpha", "Aech", "Lhum", "Lnig", "Sinv")
dseq_results <- list()
filtered_genes <- list()
for(name in ants_names){
dseq_results[[name]] <- get_dif_exp_genes(name)
filtered_genes[[name]] <- dseq_results[[name]] %>%
as.data.frame %>%
rownames_to_column("Gene") %>%
filter(padj < 0.05) %>%
select(Gene)
}
combinations <- list()
gene_count <- list()
for(i in 1:5){
combinations[[i]] <- combn(ants_names, i) # list of species names combinations
columns <- dim(combinations[[i]])[2]
for(c in 1:columns){
species <- combinations[[i]][,c] #vector of species names
group <- paste0(species, collapse = "-")
gene_list <- list() #list of vectors of gene names
for(s in species){
gene_list[[s]] <- filtered_genes[[s]]$Gene
}
gene_count[[group]] <- length(Reduce(intersect, gene_list))
}
}
model_1 <- gene_count %>% as.data.frame() %>% t %>% as.data.frame()
model_1$V2 <- as.factor(str_count(rownames(model_1), "[.]") + 1)
model_1 %>%
ggplot(aes(x=V2, y=V1)) + geom_boxplot()
model_2 <- get_dif_exp_genes(c("Mpha", "Aech", "Lhum", "Lnig", "Sinv"), 2)
m2_dim <- model_2 %>% as.data.frame() %>% filter(padj < 0.05) %>% dim
print(paste("DEGs in Model 1:", model_1 %>% filter(V2 == 5)))
print(paste("DEGs in Model 2:", m2_dim[1]))
# Section 4: Identification of caste differentially expressed genes
normal_ant = which(sampleTable$species %in% c("Aech",'Mpha',"Lhum",'Sinv',"Lnig"))
ortholog_exp.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts[,normal_ant]
ortholog_counts.ant = ortholog_counts.ant[!apply(ortholog_counts.ant, 1, anyNA),]
ortholog_counts.ant.norm = matrix(as.integer(ortholog_counts.ant), ncol = dim(ortholog_counts.ant)[2],
dimnames = list(rownames(ortholog_counts.ant),colnames(ortholog_counts.ant)))
get_dif_exp_genes <- function(target_species, model=1){
if(model == 1){
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste)
} else{
dds <- DESeqDataSetFromMatrix(
ortholog_counts.ant.norm[,which(sampleTable.ant$species %in% target_species)], sampleTable.ant[which(sampleTable.ant$species %in% target_species),],
design = ~caste +species+caste:species)
}
dds = DESeq(dds)
res.aech = results(dds, contrast = c("caste",c("Gyne",'Worker')),alpha = 0.05)
return(res.aech)
}
ants_names <- c("Mpha", "Aech", "Lhum", "Lnig", "Sinv")
dseq_results <- list()
filtered_genes <- list()
for(name in ants_names){
dseq_results[[name]] <- get_dif_exp_genes(name)
filtered_genes[[name]] <- dseq_results[[name]] %>%
as.data.frame %>%
rownames_to_column("Gene") %>%
filter(padj < 0.05) %>%
select(Gene)
}
combinations <- list()
gene_count <- list()
for(i in 1:5){
combinations[[i]] <- combn(ants_names, i) # list of species names combinations
columns <- dim(combinations[[i]])[2]
for(c in 1:columns){
species <- combinations[[i]][,c] #vector of species names
group <- paste0(species, collapse = "-")
gene_list <- list() #list of vectors of gene names
for(s in species){
gene_list[[s]] <- filtered_genes[[s]]$Gene
}
gene_count[[group]] <- length(Reduce(intersect, gene_list))
}
}
model_1 <- gene_count %>% as.data.frame() %>% t %>% as.data.frame()
model_1$V2 <- as.factor(str_count(rownames(model_1), "[.]") + 1)
model_1 %>%
ggplot(aes(x=V2, y=V1)) + geom_boxplot()
model_2 <- get_dif_exp_genes(c("Mpha", "Aech", "Lhum", "Lnig", "Sinv"), 2)
m2_dim <- model_2 %>% as.data.frame() %>% filter(padj < 0.05) %>% dim
print(paste("DEGs in Model 1:", model_1 %>% filter(V2 == 5) %>% select(V1)))
print(paste("DEGs in Model 2:", m2_dim[1]))
